//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_60
.address_size 64

	// .globl	_Z18__ox_closest_hit__v
.global .align 4 .b8 ox_entry_node[4];
.global .align 4 .f32 step_size;
.global .align 4 .u32 max_recursion_depth;
.global .align 4 .u32 num_spectra_pairs_supported;
.global .align 4 .u32 num_importance_directions;
.global .align 4 .b8 absorption_factor[4];
.global .align 4 .b8 scattering_factor[4];
.global .align 4 .b8 phase_function[4];
.global .align 16 .b8 ray_payload[96];
.global .align 16 .b8 ray_payload_scattered[32];
.global .align 4 .f32 intersection_distance;
.global .align 4 .b8 current_ray[36];
.global .align 4 .b8 index[12];
.global .align 4 .b8 normal[12];
.global .align 1 .b8 importance_directions_buffer[1];
.global .align 1 .b8 traverse_backup_buffer[1];
.global .align 4 .b8 _ZN21rti_internal_typeinfo13ox_entry_nodeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9step_sizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19max_recursion_depthE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo27num_spectra_pairs_supportedE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo25num_importance_directionsE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo17absorption_factorE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo17scattering_factorE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14phase_functionE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11ray_payloadE[8] = {82, 97, 121, 0, 96, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo21ray_payload_scatteredE[8] = {82, 97, 121, 0, 32, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo21intersection_distanceE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11current_rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5indexE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 16 .b8 _ZN21rti_internal_typename13ox_entry_nodeE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename9step_sizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename19max_recursion_depthE[12] = {111, 112, 116, 105, 120, 58, 58, 117, 105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename27num_spectra_pairs_supportedE[12] = {111, 112, 116, 105, 120, 58, 58, 117, 105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename25num_importance_directionsE[12] = {111, 112, 116, 105, 120, 58, 58, 117, 105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename17absorption_factorE[34] = {97, 98, 115, 111, 114, 112, 116, 105, 111, 110, 95, 102, 97, 99, 116, 111, 114, 95, 112, 114, 111, 103, 114, 97, 109, 95, 105, 100, 95, 116, 121, 112, 101, 0};
.global .align 16 .b8 _ZN21rti_internal_typename17scattering_factorE[34] = {115, 99, 97, 116, 116, 101, 114, 105, 110, 103, 95, 102, 97, 99, 116, 111, 114, 95, 112, 114, 111, 103, 114, 97, 109, 95, 105, 100, 95, 116, 121, 112, 101, 0};
.global .align 16 .b8 _ZN21rti_internal_typename14phase_functionE[31] = {112, 104, 97, 115, 101, 95, 102, 117, 110, 99, 116, 105, 111, 110, 95, 112, 114, 111, 103, 114, 97, 109, 95, 105, 100, 95, 116, 121, 112, 101, 0};
.global .align 16 .b8 _ZN21rti_internal_typename11ray_payloadE[33] = {111, 120, 95, 119, 114, 97, 112, 112, 101, 114, 58, 58, 79, 120, 82, 97, 121, 82, 97, 100, 105, 97, 110, 99, 101, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 16 .b8 _ZN21rti_internal_typename21ray_payload_scatteredE[39] = {111, 120, 95, 119, 114, 97, 112, 112, 101, 114, 58, 58, 79, 120, 82, 97, 121, 82, 97, 100, 105, 97, 110, 99, 101, 80, 97, 121, 108, 111, 97, 100, 83, 105, 109, 112, 108, 101, 0};
.global .align 8 .b8 _ZN21rti_internal_typename21intersection_distanceE[6] = {102, 108, 111, 97, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename11current_rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 16 .b8 _ZN21rti_internal_typename5indexE[13] = {111, 112, 116, 105, 120, 58, 58, 117, 105, 110, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename6normalE[14] = {111, 112, 116, 105, 120, 58, 58, 102, 108, 111, 97, 116, 51, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum13ox_entry_nodeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9step_sizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19max_recursion_depthE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum27num_spectra_pairs_supportedE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum25num_importance_directionsE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum17absorption_factorE = 4920;
.global .align 4 .u32 _ZN21rti_internal_typeenum17scattering_factorE = 4920;
.global .align 4 .u32 _ZN21rti_internal_typeenum14phase_functionE = 4920;
.global .align 4 .u32 _ZN21rti_internal_typeenum11ray_payloadE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum21ray_payload_scatteredE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum21intersection_distanceE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11current_rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic13ox_entry_nodeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9step_sizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19max_recursion_depthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic27num_spectra_pairs_supportedE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic25num_importance_directionsE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic17absorption_factorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic17scattering_factorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14phase_functionE[1];
.global .align 16 .b8 _ZN21rti_internal_semantic11ray_payloadE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic21ray_payload_scatteredE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic21intersection_distanceE[23] = {114, 116, 73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 68, 105, 115, 116, 97, 110, 99, 101, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic11current_rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic5indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[21] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 97, 116, 116, 114, 78, 111, 114, 109, 97, 108, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation13ox_entry_nodeE[19] = {34, 83, 99, 101, 110, 101, 32, 101, 110, 116, 114, 121, 32, 110, 111, 100, 101, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation9step_sizeE[25] = {34, 82, 97, 121, 32, 109, 97, 114, 99, 104, 105, 110, 103, 32, 115, 116, 101, 112, 32, 115, 105, 122, 101, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation19max_recursion_depthE[53] = {34, 77, 97, 120, 105, 109, 97, 108, 32, 100, 101, 112, 116, 104, 32, 111, 102, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 32, 102, 111, 114, 32, 115, 99, 97, 116, 116, 101, 114, 105, 110, 103, 32, 116, 114, 97, 118, 101, 114, 115, 101, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation27num_spectra_pairs_supportedE[31] = {34, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 119, 97, 118, 101, 108, 101, 110, 103, 116, 104, 115, 32, 105, 110, 32, 117, 115, 101, 34, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation25num_importance_directionsE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation17absorption_factorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation17scattering_factorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14phase_functionE[1];
.global .align 16 .b8 _ZN23rti_internal_annotation11ray_payloadE[22] = {34, 67, 117, 114, 114, 101, 110, 116, 32, 114, 97, 121, 32, 112, 97, 121, 108, 111, 97, 100, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation21ray_payload_scatteredE[40] = {34, 80, 97, 121, 108, 111, 97, 100, 32, 111, 102, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 115, 99, 97, 116, 116, 101, 114, 105, 110, 103, 32, 114, 97, 121, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation21intersection_distanceE[58] = {34, 80, 97, 114, 97, 109, 101, 116, 114, 105, 99, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 102, 114, 111, 109, 32, 114, 97, 121, 32, 111, 114, 105, 103, 105, 110, 32, 116, 111, 32, 116, 104, 101, 32, 105, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation11current_rayE[26] = {34, 67, 117, 114, 114, 101, 110, 116, 108, 121, 32, 116, 114, 97, 118, 101, 114, 115, 101, 100, 32, 114, 97, 121, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation5indexE[27] = {34, 73, 110, 100, 101, 120, 32, 111, 102, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 114, 97, 121, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation6normalE[34] = {34, 78, 111, 114, 109, 97, 108, 32, 111, 102, 32, 116, 104, 101, 32, 115, 117, 114, 102, 97, 99, 101, 32, 98, 101, 105, 110, 103, 32, 104, 105, 116, 34, 0};

.visible .entry _Z18__ox_closest_hit__v(

)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<209>;
	.reg .b32 	%r<98>;
	.reg .b64 	%rd<95>;


	ld.global.f32 	%f21, [normal];
	ld.global.f32 	%f1, [current_ray+12];
	ld.global.f32 	%f2, [current_ray+16];
	ld.global.f32 	%f22, [normal+4];
	mul.ftz.f32 	%f23, %f22, %f2;
	fma.rn.ftz.f32 	%f24, %f21, %f1, %f23;
	ld.global.f32 	%f3, [current_ray+20];
	ld.global.f32 	%f25, [normal+8];
	fma.rn.ftz.f32 	%f4, %f25, %f3, %f24;
	setp.lt.ftz.f32	%p1, %f4, 0f80000000;
	mov.f32 	%f208, 0f3F800000;
	@%p1 bra 	BB0_2;

	setp.gt.ftz.f32	%p2, %f4, 0f80000000;
	selp.f32	%f208, 0fBF800000, 0f00000000, %p2;

BB0_2:
	ld.global.u32 	%r12, [ray_payload+84];
	cvt.rzi.ftz.s32.f32	%r1, %f208;
	add.s32 	%r13, %r12, %r1;
	mov.u32 	%r94, 0;
	max.s32 	%r15, %r94, %r13;
	st.global.u32 	[ray_payload+84], %r15;
	ld.global.f32 	%f7, [intersection_distance];
	ld.global.f32 	%f8, [current_ray];
	fma.rn.ftz.f32 	%f9, %f7, %f1, %f8;
	ld.global.f32 	%f10, [current_ray+4];
	fma.rn.ftz.f32 	%f11, %f7, %f2, %f10;
	ld.global.f32 	%f12, [current_ray+8];
	fma.rn.ftz.f32 	%f13, %f7, %f3, %f12;
	setp.gt.s32	%p3, %r1, 0;
	@%p3 bra 	BB0_15;
	bra.uni 	BB0_3;

BB0_15:
	st.global.v2.f32 	[ray_payload+64], {%f7, %f7};
	ld.global.u32 	%r47, [ray_payload+80];
	add.s32 	%r48, %r47, 1;
	st.global.u32 	[ray_payload+80], %r48;
	ld.global.u32 	%r49, [max_recursion_depth];
	setp.gt.u32	%p12, %r48, %r49;
	@%p12 bra 	BB0_17;
	bra.uni 	BB0_16;

BB0_17:
	mov.u32 	%r79, 0;
	st.global.u32 	[ray_payload+80], %r79;
	ld.global.f32 	%f204, [current_ray+8];
	ld.global.f32 	%f203, [current_ray+4];
	ld.global.f32 	%f202, [current_ray];
	ld.global.f32 	%f207, [current_ray+20];
	ld.global.f32 	%f206, [current_ray+16];
	ld.global.f32 	%f205, [current_ray+12];
	mov.u64 	%rd94, traverse_backup_buffer;
	cvta.global.u64 	%rd35, %rd94;
	mov.u32 	%r77, 1;
	mov.u32 	%r78, 4;
	mov.u64 	%rd93, 0;
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd93, %rd93, %rd93, %rd93);
	// inline asm
	atom.add.u32 	%r80, [%rd34], 1;
	mul.lo.s32 	%r81, %r80, 9;
	// inline asm
	mov.b32 	%r55, %f202;
	// inline asm
	add.s32 	%r82, %r81, 1;
	cvt.u64.u32	%rd42, %r82;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd42, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd40], %r55;
	// inline asm
	mov.b32 	%r58, %f203;
	// inline asm
	add.s32 	%r83, %r81, 2;
	cvt.u64.u32	%rd48, %r83;
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd48, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd46], %r58;
	// inline asm
	mov.b32 	%r61, %f204;
	// inline asm
	add.s32 	%r84, %r81, 3;
	cvt.u64.u32	%rd54, %r84;
	// inline asm
	call (%rd52), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd54, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd52], %r61;
	// inline asm
	mov.b32 	%r64, %f205;
	// inline asm
	add.s32 	%r85, %r81, 4;
	cvt.u64.u32	%rd60, %r85;
	// inline asm
	call (%rd58), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd60, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd58], %r64;
	// inline asm
	mov.b32 	%r67, %f206;
	// inline asm
	add.s32 	%r86, %r81, 5;
	cvt.u64.u32	%rd66, %r86;
	// inline asm
	call (%rd64), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd66, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd64], %r67;
	// inline asm
	mov.b32 	%r70, %f207;
	// inline asm
	add.s32 	%r87, %r81, 6;
	cvt.u64.u32	%rd72, %r87;
	// inline asm
	call (%rd70), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd72, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd70], %r70;
	ld.global.u32 	%r88, [index];
	add.s32 	%r89, %r81, 7;
	cvt.u64.u32	%rd78, %r89;
	// inline asm
	call (%rd76), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd78, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd76], %r88;
	ld.global.u32 	%r90, [index+4];
	add.s32 	%r91, %r81, 8;
	cvt.u64.u32	%rd84, %r91;
	// inline asm
	call (%rd82), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd84, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd82], %r90;
	ld.global.u32 	%r92, [index+8];
	add.s32 	%r93, %r81, 9;
	cvt.u64.u32	%rd90, %r93;
	// inline asm
	call (%rd88), _rt_buffer_get_64, (%rd35, %r77, %r78, %rd90, %rd93, %rd93, %rd93);
	// inline asm
	st.u32 	[%rd88], %r92;
	bra.uni 	BB0_18;

BB0_3:
	setp.gt.s32	%p4, %r1, -1;
	@%p4 bra 	BB0_18;

	ld.global.f32 	%f26, [ray_payload+68];
	add.ftz.f32 	%f27, %f7, %f26;
	st.global.f32 	[ray_payload+68], %f27;
	mul.ftz.f32 	%f28, %f7, 0f3F000000;
	fma.rn.ftz.f32 	%f14, %f1, %f28, %f8;
	fma.rn.ftz.f32 	%f15, %f28, %f2, %f10;
	fma.rn.ftz.f32 	%f16, %f28, %f3, %f12;
	ld.global.u32 	%r2, [num_spectra_pairs_supported];
	mov.u32 	%r16, 8;
	min.u32 	%r3, %r16, %r2;
	setp.eq.s32	%p5, %r3, 0;
	@%p5 bra 	BB0_13;

	min.u32 	%r4, %r2, %r16;
	and.b32  	%r20, %r4, 3;
	setp.eq.s32	%p6, %r20, 0;
	@%p6 bra 	BB0_11;

	setp.eq.s32	%p7, %r20, 1;
	@%p7 bra 	BB0_10;

	setp.eq.s32	%p8, %r20, 2;
	@%p8 bra 	BB0_9;

	ld.global.u32 	%r22, [absorption_factor];
	// inline asm
	call (%rd1), _rt_callable_program_from_id_64, (%r22);
	// inline asm
	mov.u32 	%r25, 0;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r25;
	.param .align 8 .b8 retval0[8];
	prototype_0 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd1, 
	(
	param0, 
	param1
	)
	, prototype_0;
	ld.param.f32	%f29, [retval0+0];
	ld.param.f32	%f30, [retval0+4];
	
	//{
	}// Callseq End 0
	add.ftz.f32 	%f31, %f29, 0f00000000;
	add.ftz.f32 	%f32, %f30, 0f00000000;
	mul.ftz.f32 	%f33, %f7, %f31;
	mul.ftz.f32 	%f34, %f7, %f32;
	mul.ftz.f32 	%f35, %f33, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f36, %f35;
	mul.ftz.f32 	%f37, %f34, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f38, %f37;
	ld.global.v2.f32 	{%f39, %f40}, [ray_payload];
	ld.global.u32 	%r23, [scattering_factor];
	// inline asm
	call (%rd2), _rt_callable_program_from_id_64, (%r23);
	// inline asm
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .b32 param1;
	st.param.b32	[param1+0], %r25;
	.param .align 8 .b8 retval0[8];
	prototype_1 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd2, 
	(
	param0, 
	param1
	)
	, prototype_1;
	ld.param.f32	%f43, [retval0+0];
	ld.param.f32	%f44, [retval0+4];
	
	//{
	}// Callseq End 1
	mul.ftz.f32 	%f45, %f43, 0f00000000;
	mul.ftz.f32 	%f46, %f44, 0f00000000;
	mul.ftz.f32 	%f47, %f7, %f45;
	mul.ftz.f32 	%f48, %f7, %f46;
	fma.rn.ftz.f32 	%f49, %f38, %f40, %f48;
	fma.rn.ftz.f32 	%f50, %f36, %f39, %f47;
	st.global.v2.f32 	[ray_payload], {%f50, %f49};
	mov.u32 	%r94, 1;

BB0_9:
	ld.global.u32 	%r26, [absorption_factor];
	// inline asm
	call (%rd3), _rt_callable_program_from_id_64, (%r26);
	// inline asm
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r94;
	.param .align 8 .b8 retval0[8];
	prototype_2 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd3, 
	(
	param0, 
	param1
	)
	, prototype_2;
	ld.param.f32	%f51, [retval0+0];
	ld.param.f32	%f52, [retval0+4];
	
	//{
	}// Callseq End 2
	add.ftz.f32 	%f53, %f51, 0f00000000;
	add.ftz.f32 	%f54, %f52, 0f00000000;
	mul.ftz.f32 	%f55, %f7, %f53;
	mul.ftz.f32 	%f56, %f7, %f54;
	mul.ftz.f32 	%f57, %f55, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f58, %f57;
	mul.ftz.f32 	%f59, %f56, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f60, %f59;
	mul.wide.u32 	%rd5, %r94, 8;
	mov.u64 	%rd6, ray_payload;
	add.s64 	%rd7, %rd6, %rd5;
	ld.global.v2.f32 	{%f61, %f62}, [%rd7];
	ld.global.u32 	%r27, [scattering_factor];
	// inline asm
	call (%rd4), _rt_callable_program_from_id_64, (%r27);
	// inline asm
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .b32 param1;
	st.param.b32	[param1+0], %r94;
	.param .align 8 .b8 retval0[8];
	prototype_3 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd4, 
	(
	param0, 
	param1
	)
	, prototype_3;
	ld.param.f32	%f65, [retval0+0];
	ld.param.f32	%f66, [retval0+4];
	
	//{
	}// Callseq End 3
	mul.ftz.f32 	%f67, %f65, 0f00000000;
	mul.ftz.f32 	%f68, %f66, 0f00000000;
	mul.ftz.f32 	%f69, %f7, %f67;
	mul.ftz.f32 	%f70, %f7, %f68;
	fma.rn.ftz.f32 	%f71, %f60, %f62, %f70;
	fma.rn.ftz.f32 	%f72, %f58, %f61, %f69;
	st.global.v2.f32 	[%rd7], {%f72, %f71};
	add.s32 	%r94, %r94, 1;

BB0_10:
	ld.global.u32 	%r28, [absorption_factor];
	// inline asm
	call (%rd8), _rt_callable_program_from_id_64, (%r28);
	// inline asm
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r94;
	.param .align 8 .b8 retval0[8];
	prototype_4 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd8, 
	(
	param0, 
	param1
	)
	, prototype_4;
	ld.param.f32	%f73, [retval0+0];
	ld.param.f32	%f74, [retval0+4];
	
	//{
	}// Callseq End 4
	add.ftz.f32 	%f75, %f73, 0f00000000;
	add.ftz.f32 	%f76, %f74, 0f00000000;
	mul.ftz.f32 	%f77, %f7, %f75;
	mul.ftz.f32 	%f78, %f7, %f76;
	mul.ftz.f32 	%f79, %f77, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f80, %f79;
	mul.ftz.f32 	%f81, %f78, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f82, %f81;
	mul.wide.u32 	%rd10, %r94, 8;
	mov.u64 	%rd11, ray_payload;
	add.s64 	%rd12, %rd11, %rd10;
	ld.global.v2.f32 	{%f83, %f84}, [%rd12];
	ld.global.u32 	%r29, [scattering_factor];
	// inline asm
	call (%rd9), _rt_callable_program_from_id_64, (%r29);
	// inline asm
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .b32 param1;
	st.param.b32	[param1+0], %r94;
	.param .align 8 .b8 retval0[8];
	prototype_5 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd9, 
	(
	param0, 
	param1
	)
	, prototype_5;
	ld.param.f32	%f87, [retval0+0];
	ld.param.f32	%f88, [retval0+4];
	
	//{
	}// Callseq End 5
	mul.ftz.f32 	%f89, %f87, 0f00000000;
	mul.ftz.f32 	%f90, %f88, 0f00000000;
	mul.ftz.f32 	%f91, %f7, %f89;
	mul.ftz.f32 	%f92, %f7, %f90;
	fma.rn.ftz.f32 	%f93, %f82, %f84, %f92;
	fma.rn.ftz.f32 	%f94, %f80, %f83, %f91;
	st.global.v2.f32 	[%rd12], {%f94, %f93};
	add.s32 	%r94, %r94, 1;

BB0_11:
	setp.lt.u32	%p9, %r4, 4;
	@%p9 bra 	BB0_13;

BB0_12:
	ld.global.u32 	%r30, [absorption_factor];
	// inline asm
	call (%rd13), _rt_callable_program_from_id_64, (%r30);
	// inline asm
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r94;
	.param .align 8 .b8 retval0[8];
	prototype_6 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd13, 
	(
	param0, 
	param1
	)
	, prototype_6;
	ld.param.f32	%f95, [retval0+0];
	ld.param.f32	%f96, [retval0+4];
	
	//{
	}// Callseq End 6
	add.ftz.f32 	%f97, %f95, 0f00000000;
	add.ftz.f32 	%f98, %f96, 0f00000000;
	mul.ftz.f32 	%f99, %f7, %f97;
	mul.ftz.f32 	%f100, %f7, %f98;
	mul.ftz.f32 	%f101, %f99, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f102, %f101;
	mul.ftz.f32 	%f103, %f100, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f104, %f103;
	mul.wide.u32 	%rd21, %r94, 8;
	mov.u64 	%rd22, ray_payload;
	add.s64 	%rd23, %rd22, %rd21;
	ld.global.v2.f32 	{%f105, %f106}, [%rd23];
	ld.global.u32 	%r31, [scattering_factor];
	// inline asm
	call (%rd14), _rt_callable_program_from_id_64, (%r31);
	// inline asm
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .b32 param1;
	st.param.b32	[param1+0], %r94;
	.param .align 8 .b8 retval0[8];
	prototype_7 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd14, 
	(
	param0, 
	param1
	)
	, prototype_7;
	ld.param.f32	%f109, [retval0+0];
	ld.param.f32	%f110, [retval0+4];
	
	//{
	}// Callseq End 7
	mul.ftz.f32 	%f111, %f109, 0f00000000;
	mul.ftz.f32 	%f112, %f110, 0f00000000;
	mul.ftz.f32 	%f113, %f7, %f111;
	mul.ftz.f32 	%f114, %f7, %f112;
	fma.rn.ftz.f32 	%f115, %f104, %f106, %f114;
	fma.rn.ftz.f32 	%f116, %f102, %f105, %f113;
	st.global.v2.f32 	[%rd23], {%f116, %f115};
	ld.global.u32 	%r32, [absorption_factor];
	// inline asm
	call (%rd15), _rt_callable_program_from_id_64, (%r32);
	// inline asm
	add.s32 	%r38, %r94, 1;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r38;
	.param .align 8 .b8 retval0[8];
	prototype_8 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd15, 
	(
	param0, 
	param1
	)
	, prototype_8;
	ld.param.f32	%f117, [retval0+0];
	ld.param.f32	%f118, [retval0+4];
	
	//{
	}// Callseq End 8
	add.ftz.f32 	%f119, %f117, 0f00000000;
	add.ftz.f32 	%f120, %f118, 0f00000000;
	mul.ftz.f32 	%f121, %f7, %f119;
	mul.ftz.f32 	%f122, %f7, %f120;
	mul.ftz.f32 	%f123, %f121, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f124, %f123;
	mul.ftz.f32 	%f125, %f122, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f126, %f125;
	mul.wide.u32 	%rd24, %r38, 8;
	add.s64 	%rd25, %rd22, %rd24;
	ld.global.v2.f32 	{%f127, %f128}, [%rd25];
	ld.global.u32 	%r33, [scattering_factor];
	// inline asm
	call (%rd16), _rt_callable_program_from_id_64, (%r33);
	// inline asm
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .b32 param1;
	st.param.b32	[param1+0], %r38;
	.param .align 8 .b8 retval0[8];
	prototype_9 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd16, 
	(
	param0, 
	param1
	)
	, prototype_9;
	ld.param.f32	%f131, [retval0+0];
	ld.param.f32	%f132, [retval0+4];
	
	//{
	}// Callseq End 9
	mul.ftz.f32 	%f133, %f131, 0f00000000;
	mul.ftz.f32 	%f134, %f132, 0f00000000;
	mul.ftz.f32 	%f135, %f7, %f133;
	mul.ftz.f32 	%f136, %f7, %f134;
	fma.rn.ftz.f32 	%f137, %f126, %f128, %f136;
	fma.rn.ftz.f32 	%f138, %f124, %f127, %f135;
	st.global.v2.f32 	[%rd25], {%f138, %f137};
	ld.global.u32 	%r34, [absorption_factor];
	// inline asm
	call (%rd17), _rt_callable_program_from_id_64, (%r34);
	// inline asm
	add.s32 	%r39, %r94, 2;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r39;
	.param .align 8 .b8 retval0[8];
	prototype_10 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd17, 
	(
	param0, 
	param1
	)
	, prototype_10;
	ld.param.f32	%f139, [retval0+0];
	ld.param.f32	%f140, [retval0+4];
	
	//{
	}// Callseq End 10
	add.ftz.f32 	%f141, %f139, 0f00000000;
	add.ftz.f32 	%f142, %f140, 0f00000000;
	mul.ftz.f32 	%f143, %f7, %f141;
	mul.ftz.f32 	%f144, %f7, %f142;
	mul.ftz.f32 	%f145, %f143, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f146, %f145;
	mul.ftz.f32 	%f147, %f144, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f148, %f147;
	mul.wide.u32 	%rd26, %r39, 8;
	add.s64 	%rd27, %rd22, %rd26;
	ld.global.v2.f32 	{%f149, %f150}, [%rd27];
	ld.global.u32 	%r35, [scattering_factor];
	// inline asm
	call (%rd18), _rt_callable_program_from_id_64, (%r35);
	// inline asm
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .b32 param1;
	st.param.b32	[param1+0], %r39;
	.param .align 8 .b8 retval0[8];
	prototype_11 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd18, 
	(
	param0, 
	param1
	)
	, prototype_11;
	ld.param.f32	%f153, [retval0+0];
	ld.param.f32	%f154, [retval0+4];
	
	//{
	}// Callseq End 11
	mul.ftz.f32 	%f155, %f153, 0f00000000;
	mul.ftz.f32 	%f156, %f154, 0f00000000;
	mul.ftz.f32 	%f157, %f7, %f155;
	mul.ftz.f32 	%f158, %f7, %f156;
	fma.rn.ftz.f32 	%f159, %f148, %f150, %f158;
	fma.rn.ftz.f32 	%f160, %f146, %f149, %f157;
	st.global.v2.f32 	[%rd27], {%f160, %f159};
	ld.global.u32 	%r36, [absorption_factor];
	// inline asm
	call (%rd19), _rt_callable_program_from_id_64, (%r36);
	// inline asm
	add.s32 	%r40, %r94, 3;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r40;
	.param .align 8 .b8 retval0[8];
	prototype_12 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd19, 
	(
	param0, 
	param1
	)
	, prototype_12;
	ld.param.f32	%f161, [retval0+0];
	ld.param.f32	%f162, [retval0+4];
	
	//{
	}// Callseq End 12
	add.ftz.f32 	%f163, %f161, 0f00000000;
	add.ftz.f32 	%f164, %f162, 0f00000000;
	mul.ftz.f32 	%f165, %f7, %f163;
	mul.ftz.f32 	%f166, %f7, %f164;
	mul.ftz.f32 	%f167, %f165, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f168, %f167;
	mul.ftz.f32 	%f169, %f166, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f170, %f169;
	mul.wide.u32 	%rd28, %r40, 8;
	add.s64 	%rd29, %rd22, %rd28;
	ld.global.v2.f32 	{%f171, %f172}, [%rd29];
	ld.global.u32 	%r37, [scattering_factor];
	// inline asm
	call (%rd20), _rt_callable_program_from_id_64, (%r37);
	// inline asm
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .b32 param1;
	st.param.b32	[param1+0], %r40;
	.param .align 8 .b8 retval0[8];
	prototype_13 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd20, 
	(
	param0, 
	param1
	)
	, prototype_13;
	ld.param.f32	%f175, [retval0+0];
	ld.param.f32	%f176, [retval0+4];
	
	//{
	}// Callseq End 13
	mul.ftz.f32 	%f177, %f175, 0f00000000;
	mul.ftz.f32 	%f178, %f176, 0f00000000;
	mul.ftz.f32 	%f179, %f7, %f177;
	mul.ftz.f32 	%f180, %f7, %f178;
	fma.rn.ftz.f32 	%f181, %f170, %f172, %f180;
	fma.rn.ftz.f32 	%f182, %f168, %f171, %f179;
	st.global.v2.f32 	[%rd29], {%f182, %f181};
	add.s32 	%r94, %r94, 4;
	setp.lt.u32	%p10, %r94, %r3;
	@%p10 bra 	BB0_12;

BB0_13:
	ld.global.u32 	%r41, [ray_payload+80];
	add.s32 	%r42, %r41, 1;
	st.global.u32 	[ray_payload+80], %r42;
	ld.global.u32 	%r43, [max_recursion_depth];
	setp.gt.u32	%p11, %r42, %r43;
	@%p11 bra 	BB0_18;

	ld.global.f32 	%f191, [step_size];
	mul.ftz.f32 	%f192, %f191, 0f3727C5AC;
	ld.global.f32 	%f186, [current_ray+12];
	ld.global.f32 	%f187, [current_ray+16];
	ld.global.f32 	%f188, [current_ray+20];
	fma.rn.ftz.f32 	%f183, %f186, %f192, %f9;
	fma.rn.ftz.f32 	%f184, %f192, %f187, %f11;
	fma.rn.ftz.f32 	%f185, %f192, %f188, %f13;
	ld.global.u32 	%r44, [ox_entry_node];
	mov.u64 	%rd31, ray_payload;
	cvta.global.u64 	%rd30, %rd31;
	mov.u32 	%r45, 0;
	mov.f32 	%f189, 0f00000000;
	mov.f32 	%f190, 0f6C4ECB8F;
	mov.u32 	%r46, 96;
	// inline asm
	call _rt_trace_64, (%r44, %f183, %f184, %f185, %f186, %f187, %f188, %r45, %f189, %f190, %rd30, %r46);
	// inline asm
	bra.uni 	BB0_18;

BB0_16:
	ld.global.f32 	%f200, [step_size];
	mul.ftz.f32 	%f201, %f200, 0f3727C5AC;
	fma.rn.ftz.f32 	%f193, %f1, %f201, %f9;
	fma.rn.ftz.f32 	%f194, %f201, %f2, %f11;
	fma.rn.ftz.f32 	%f195, %f201, %f3, %f13;
	ld.global.f32 	%f198, [current_ray+20];
	ld.global.f32 	%f197, [current_ray+16];
	ld.global.f32 	%f196, [current_ray+12];
	ld.global.u32 	%r50, [ox_entry_node];
	mov.u64 	%rd33, ray_payload;
	cvta.global.u64 	%rd32, %rd33;
	mov.u32 	%r51, 0;
	mov.f32 	%f199, 0f00000000;
	mov.u32 	%r52, 96;
	// inline asm
	call _rt_trace_64, (%r50, %f193, %f194, %f195, %f196, %f197, %f198, %r51, %f199, %f200, %rd32, %r52);
	// inline asm

BB0_18:
	ret;
}

	// .globl	_Z11__ox_miss__v
.visible .entry _Z11__ox_miss__v(

)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<188>;
	.reg .b32 	%r<88>;
	.reg .b64 	%rd<93>;


	ld.global.u32 	%r12, [ray_payload+84];
	setp.eq.s32	%p1, %r12, 0;
	@%p1 bra 	BB1_13;

	ld.global.f32 	%f1, [step_size];
	ld.global.f32 	%f11, [current_ray+12];
	ld.global.f32 	%f12, [current_ray+16];
	ld.global.f32 	%f13, [current_ray+20];
	ld.global.f32 	%f14, [current_ray];
	fma.rn.ftz.f32 	%f2, %f1, %f11, %f14;
	ld.global.f32 	%f15, [current_ray+4];
	fma.rn.ftz.f32 	%f3, %f1, %f12, %f15;
	ld.global.f32 	%f16, [current_ray+8];
	fma.rn.ftz.f32 	%f4, %f1, %f13, %f16;
	mul.ftz.f32 	%f17, %f1, 0f3F000000;
	fma.rn.ftz.f32 	%f8, %f11, %f17, %f14;
	fma.rn.ftz.f32 	%f9, %f17, %f12, %f15;
	fma.rn.ftz.f32 	%f10, %f17, %f13, %f16;
	ld.global.f32 	%f18, [ray_payload+68];
	add.ftz.f32 	%f19, %f1, %f18;
	st.global.f32 	[ray_payload+68], %f19;
	ld.global.u32 	%r1, [num_spectra_pairs_supported];
	mov.u32 	%r13, 8;
	min.u32 	%r2, %r13, %r1;
	setp.eq.s32	%p2, %r2, 0;
	@%p2 bra 	BB1_10;

	min.u32 	%r3, %r1, %r13;
	and.b32  	%r17, %r3, 3;
	mov.u32 	%r84, 0;
	setp.eq.s32	%p3, %r17, 0;
	@%p3 bra 	BB1_8;

	setp.eq.s32	%p4, %r17, 1;
	@%p4 bra 	BB1_7;

	setp.eq.s32	%p5, %r17, 2;
	@%p5 bra 	BB1_6;

	ld.global.u32 	%r19, [absorption_factor];
	// inline asm
	call (%rd1), _rt_callable_program_from_id_64, (%r19);
	// inline asm
	mov.u32 	%r22, 0;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f8;
	st.param.f32	[param0+4], %f9;
	st.param.f32	[param0+8], %f10;
	.param .b32 param1;
	st.param.b32	[param1+0], %r22;
	.param .align 8 .b8 retval0[8];
	prototype_14 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd1, 
	(
	param0, 
	param1
	)
	, prototype_14;
	ld.param.f32	%f20, [retval0+0];
	ld.param.f32	%f21, [retval0+4];
	
	//{
	}// Callseq End 14
	add.ftz.f32 	%f22, %f20, 0f00000000;
	add.ftz.f32 	%f23, %f21, 0f00000000;
	mul.ftz.f32 	%f24, %f1, %f22;
	mul.ftz.f32 	%f25, %f1, %f23;
	mul.ftz.f32 	%f26, %f24, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f27, %f26;
	mul.ftz.f32 	%f28, %f25, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f29, %f28;
	ld.global.v2.f32 	{%f30, %f31}, [ray_payload];
	ld.global.u32 	%r20, [scattering_factor];
	// inline asm
	call (%rd2), _rt_callable_program_from_id_64, (%r20);
	// inline asm
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f2;
	st.param.f32	[param0+4], %f3;
	st.param.f32	[param0+8], %f4;
	.param .b32 param1;
	st.param.b32	[param1+0], %r22;
	.param .align 8 .b8 retval0[8];
	prototype_15 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd2, 
	(
	param0, 
	param1
	)
	, prototype_15;
	ld.param.f32	%f34, [retval0+0];
	ld.param.f32	%f35, [retval0+4];
	
	//{
	}// Callseq End 15
	mul.ftz.f32 	%f36, %f34, 0f00000000;
	mul.ftz.f32 	%f37, %f35, 0f00000000;
	mul.ftz.f32 	%f38, %f1, %f36;
	mul.ftz.f32 	%f39, %f1, %f37;
	fma.rn.ftz.f32 	%f40, %f29, %f31, %f39;
	fma.rn.ftz.f32 	%f41, %f27, %f30, %f38;
	st.global.v2.f32 	[ray_payload], {%f41, %f40};
	mov.u32 	%r84, 1;

BB1_6:
	ld.global.u32 	%r23, [absorption_factor];
	// inline asm
	call (%rd3), _rt_callable_program_from_id_64, (%r23);
	// inline asm
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f8;
	st.param.f32	[param0+4], %f9;
	st.param.f32	[param0+8], %f10;
	.param .b32 param1;
	st.param.b32	[param1+0], %r84;
	.param .align 8 .b8 retval0[8];
	prototype_16 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd3, 
	(
	param0, 
	param1
	)
	, prototype_16;
	ld.param.f32	%f42, [retval0+0];
	ld.param.f32	%f43, [retval0+4];
	
	//{
	}// Callseq End 16
	add.ftz.f32 	%f44, %f42, 0f00000000;
	add.ftz.f32 	%f45, %f43, 0f00000000;
	mul.ftz.f32 	%f46, %f1, %f44;
	mul.ftz.f32 	%f47, %f1, %f45;
	mul.ftz.f32 	%f48, %f46, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f49, %f48;
	mul.ftz.f32 	%f50, %f47, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f51, %f50;
	mul.wide.u32 	%rd5, %r84, 8;
	mov.u64 	%rd6, ray_payload;
	add.s64 	%rd7, %rd6, %rd5;
	ld.global.v2.f32 	{%f52, %f53}, [%rd7];
	ld.global.u32 	%r24, [scattering_factor];
	// inline asm
	call (%rd4), _rt_callable_program_from_id_64, (%r24);
	// inline asm
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f2;
	st.param.f32	[param0+4], %f3;
	st.param.f32	[param0+8], %f4;
	.param .b32 param1;
	st.param.b32	[param1+0], %r84;
	.param .align 8 .b8 retval0[8];
	prototype_17 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd4, 
	(
	param0, 
	param1
	)
	, prototype_17;
	ld.param.f32	%f56, [retval0+0];
	ld.param.f32	%f57, [retval0+4];
	
	//{
	}// Callseq End 17
	mul.ftz.f32 	%f58, %f56, 0f00000000;
	mul.ftz.f32 	%f59, %f57, 0f00000000;
	mul.ftz.f32 	%f60, %f1, %f58;
	mul.ftz.f32 	%f61, %f1, %f59;
	fma.rn.ftz.f32 	%f62, %f51, %f53, %f61;
	fma.rn.ftz.f32 	%f63, %f49, %f52, %f60;
	st.global.v2.f32 	[%rd7], {%f63, %f62};
	add.s32 	%r84, %r84, 1;

BB1_7:
	ld.global.u32 	%r25, [absorption_factor];
	// inline asm
	call (%rd8), _rt_callable_program_from_id_64, (%r25);
	// inline asm
	// Callseq Start 18
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f8;
	st.param.f32	[param0+4], %f9;
	st.param.f32	[param0+8], %f10;
	.param .b32 param1;
	st.param.b32	[param1+0], %r84;
	.param .align 8 .b8 retval0[8];
	prototype_18 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd8, 
	(
	param0, 
	param1
	)
	, prototype_18;
	ld.param.f32	%f64, [retval0+0];
	ld.param.f32	%f65, [retval0+4];
	
	//{
	}// Callseq End 18
	add.ftz.f32 	%f66, %f64, 0f00000000;
	add.ftz.f32 	%f67, %f65, 0f00000000;
	mul.ftz.f32 	%f68, %f1, %f66;
	mul.ftz.f32 	%f69, %f1, %f67;
	mul.ftz.f32 	%f70, %f68, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f71, %f70;
	mul.ftz.f32 	%f72, %f69, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f73, %f72;
	mul.wide.u32 	%rd10, %r84, 8;
	mov.u64 	%rd11, ray_payload;
	add.s64 	%rd12, %rd11, %rd10;
	ld.global.v2.f32 	{%f74, %f75}, [%rd12];
	ld.global.u32 	%r26, [scattering_factor];
	// inline asm
	call (%rd9), _rt_callable_program_from_id_64, (%r26);
	// inline asm
	// Callseq Start 19
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f2;
	st.param.f32	[param0+4], %f3;
	st.param.f32	[param0+8], %f4;
	.param .b32 param1;
	st.param.b32	[param1+0], %r84;
	.param .align 8 .b8 retval0[8];
	prototype_19 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd9, 
	(
	param0, 
	param1
	)
	, prototype_19;
	ld.param.f32	%f78, [retval0+0];
	ld.param.f32	%f79, [retval0+4];
	
	//{
	}// Callseq End 19
	mul.ftz.f32 	%f80, %f78, 0f00000000;
	mul.ftz.f32 	%f81, %f79, 0f00000000;
	mul.ftz.f32 	%f82, %f1, %f80;
	mul.ftz.f32 	%f83, %f1, %f81;
	fma.rn.ftz.f32 	%f84, %f73, %f75, %f83;
	fma.rn.ftz.f32 	%f85, %f71, %f74, %f82;
	st.global.v2.f32 	[%rd12], {%f85, %f84};
	add.s32 	%r84, %r84, 1;

BB1_8:
	setp.lt.u32	%p6, %r3, 4;
	@%p6 bra 	BB1_10;

BB1_9:
	ld.global.u32 	%r27, [absorption_factor];
	// inline asm
	call (%rd13), _rt_callable_program_from_id_64, (%r27);
	// inline asm
	// Callseq Start 20
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f8;
	st.param.f32	[param0+4], %f9;
	st.param.f32	[param0+8], %f10;
	.param .b32 param1;
	st.param.b32	[param1+0], %r84;
	.param .align 8 .b8 retval0[8];
	prototype_20 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd13, 
	(
	param0, 
	param1
	)
	, prototype_20;
	ld.param.f32	%f86, [retval0+0];
	ld.param.f32	%f87, [retval0+4];
	
	//{
	}// Callseq End 20
	add.ftz.f32 	%f88, %f86, 0f00000000;
	add.ftz.f32 	%f89, %f87, 0f00000000;
	mul.ftz.f32 	%f90, %f1, %f88;
	mul.ftz.f32 	%f91, %f1, %f89;
	mul.ftz.f32 	%f92, %f90, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f93, %f92;
	mul.ftz.f32 	%f94, %f91, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f95, %f94;
	mul.wide.u32 	%rd21, %r84, 8;
	mov.u64 	%rd22, ray_payload;
	add.s64 	%rd23, %rd22, %rd21;
	ld.global.v2.f32 	{%f96, %f97}, [%rd23];
	ld.global.u32 	%r28, [scattering_factor];
	// inline asm
	call (%rd14), _rt_callable_program_from_id_64, (%r28);
	// inline asm
	// Callseq Start 21
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f2;
	st.param.f32	[param0+4], %f3;
	st.param.f32	[param0+8], %f4;
	.param .b32 param1;
	st.param.b32	[param1+0], %r84;
	.param .align 8 .b8 retval0[8];
	prototype_21 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd14, 
	(
	param0, 
	param1
	)
	, prototype_21;
	ld.param.f32	%f100, [retval0+0];
	ld.param.f32	%f101, [retval0+4];
	
	//{
	}// Callseq End 21
	mul.ftz.f32 	%f102, %f100, 0f00000000;
	mul.ftz.f32 	%f103, %f101, 0f00000000;
	mul.ftz.f32 	%f104, %f1, %f102;
	mul.ftz.f32 	%f105, %f1, %f103;
	fma.rn.ftz.f32 	%f106, %f95, %f97, %f105;
	fma.rn.ftz.f32 	%f107, %f93, %f96, %f104;
	st.global.v2.f32 	[%rd23], {%f107, %f106};
	ld.global.u32 	%r29, [absorption_factor];
	// inline asm
	call (%rd15), _rt_callable_program_from_id_64, (%r29);
	// inline asm
	add.s32 	%r35, %r84, 1;
	// Callseq Start 22
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f8;
	st.param.f32	[param0+4], %f9;
	st.param.f32	[param0+8], %f10;
	.param .b32 param1;
	st.param.b32	[param1+0], %r35;
	.param .align 8 .b8 retval0[8];
	prototype_22 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd15, 
	(
	param0, 
	param1
	)
	, prototype_22;
	ld.param.f32	%f108, [retval0+0];
	ld.param.f32	%f109, [retval0+4];
	
	//{
	}// Callseq End 22
	add.ftz.f32 	%f110, %f108, 0f00000000;
	add.ftz.f32 	%f111, %f109, 0f00000000;
	mul.ftz.f32 	%f112, %f1, %f110;
	mul.ftz.f32 	%f113, %f1, %f111;
	mul.ftz.f32 	%f114, %f112, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f115, %f114;
	mul.ftz.f32 	%f116, %f113, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f117, %f116;
	mul.wide.u32 	%rd24, %r35, 8;
	add.s64 	%rd25, %rd22, %rd24;
	ld.global.v2.f32 	{%f118, %f119}, [%rd25];
	ld.global.u32 	%r30, [scattering_factor];
	// inline asm
	call (%rd16), _rt_callable_program_from_id_64, (%r30);
	// inline asm
	// Callseq Start 23
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f2;
	st.param.f32	[param0+4], %f3;
	st.param.f32	[param0+8], %f4;
	.param .b32 param1;
	st.param.b32	[param1+0], %r35;
	.param .align 8 .b8 retval0[8];
	prototype_23 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd16, 
	(
	param0, 
	param1
	)
	, prototype_23;
	ld.param.f32	%f122, [retval0+0];
	ld.param.f32	%f123, [retval0+4];
	
	//{
	}// Callseq End 23
	mul.ftz.f32 	%f124, %f122, 0f00000000;
	mul.ftz.f32 	%f125, %f123, 0f00000000;
	mul.ftz.f32 	%f126, %f1, %f124;
	mul.ftz.f32 	%f127, %f1, %f125;
	fma.rn.ftz.f32 	%f128, %f117, %f119, %f127;
	fma.rn.ftz.f32 	%f129, %f115, %f118, %f126;
	st.global.v2.f32 	[%rd25], {%f129, %f128};
	ld.global.u32 	%r31, [absorption_factor];
	// inline asm
	call (%rd17), _rt_callable_program_from_id_64, (%r31);
	// inline asm
	add.s32 	%r36, %r84, 2;
	// Callseq Start 24
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f8;
	st.param.f32	[param0+4], %f9;
	st.param.f32	[param0+8], %f10;
	.param .b32 param1;
	st.param.b32	[param1+0], %r36;
	.param .align 8 .b8 retval0[8];
	prototype_24 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd17, 
	(
	param0, 
	param1
	)
	, prototype_24;
	ld.param.f32	%f130, [retval0+0];
	ld.param.f32	%f131, [retval0+4];
	
	//{
	}// Callseq End 24
	add.ftz.f32 	%f132, %f130, 0f00000000;
	add.ftz.f32 	%f133, %f131, 0f00000000;
	mul.ftz.f32 	%f134, %f1, %f132;
	mul.ftz.f32 	%f135, %f1, %f133;
	mul.ftz.f32 	%f136, %f134, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f137, %f136;
	mul.ftz.f32 	%f138, %f135, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f139, %f138;
	mul.wide.u32 	%rd26, %r36, 8;
	add.s64 	%rd27, %rd22, %rd26;
	ld.global.v2.f32 	{%f140, %f141}, [%rd27];
	ld.global.u32 	%r32, [scattering_factor];
	// inline asm
	call (%rd18), _rt_callable_program_from_id_64, (%r32);
	// inline asm
	// Callseq Start 25
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f2;
	st.param.f32	[param0+4], %f3;
	st.param.f32	[param0+8], %f4;
	.param .b32 param1;
	st.param.b32	[param1+0], %r36;
	.param .align 8 .b8 retval0[8];
	prototype_25 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd18, 
	(
	param0, 
	param1
	)
	, prototype_25;
	ld.param.f32	%f144, [retval0+0];
	ld.param.f32	%f145, [retval0+4];
	
	//{
	}// Callseq End 25
	mul.ftz.f32 	%f146, %f144, 0f00000000;
	mul.ftz.f32 	%f147, %f145, 0f00000000;
	mul.ftz.f32 	%f148, %f1, %f146;
	mul.ftz.f32 	%f149, %f1, %f147;
	fma.rn.ftz.f32 	%f150, %f139, %f141, %f149;
	fma.rn.ftz.f32 	%f151, %f137, %f140, %f148;
	st.global.v2.f32 	[%rd27], {%f151, %f150};
	ld.global.u32 	%r33, [absorption_factor];
	// inline asm
	call (%rd19), _rt_callable_program_from_id_64, (%r33);
	// inline asm
	add.s32 	%r37, %r84, 3;
	// Callseq Start 26
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f8;
	st.param.f32	[param0+4], %f9;
	st.param.f32	[param0+8], %f10;
	.param .b32 param1;
	st.param.b32	[param1+0], %r37;
	.param .align 8 .b8 retval0[8];
	prototype_26 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd19, 
	(
	param0, 
	param1
	)
	, prototype_26;
	ld.param.f32	%f152, [retval0+0];
	ld.param.f32	%f153, [retval0+4];
	
	//{
	}// Callseq End 26
	add.ftz.f32 	%f154, %f152, 0f00000000;
	add.ftz.f32 	%f155, %f153, 0f00000000;
	mul.ftz.f32 	%f156, %f1, %f154;
	mul.ftz.f32 	%f157, %f1, %f155;
	mul.ftz.f32 	%f158, %f156, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f159, %f158;
	mul.ftz.f32 	%f160, %f157, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f161, %f160;
	mul.wide.u32 	%rd28, %r37, 8;
	add.s64 	%rd29, %rd22, %rd28;
	ld.global.v2.f32 	{%f162, %f163}, [%rd29];
	ld.global.u32 	%r34, [scattering_factor];
	// inline asm
	call (%rd20), _rt_callable_program_from_id_64, (%r34);
	// inline asm
	// Callseq Start 27
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f2;
	st.param.f32	[param0+4], %f3;
	st.param.f32	[param0+8], %f4;
	.param .b32 param1;
	st.param.b32	[param1+0], %r37;
	.param .align 8 .b8 retval0[8];
	prototype_27 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd20, 
	(
	param0, 
	param1
	)
	, prototype_27;
	ld.param.f32	%f166, [retval0+0];
	ld.param.f32	%f167, [retval0+4];
	
	//{
	}// Callseq End 27
	mul.ftz.f32 	%f168, %f166, 0f00000000;
	mul.ftz.f32 	%f169, %f167, 0f00000000;
	mul.ftz.f32 	%f170, %f1, %f168;
	mul.ftz.f32 	%f171, %f1, %f169;
	fma.rn.ftz.f32 	%f172, %f161, %f163, %f171;
	fma.rn.ftz.f32 	%f173, %f159, %f162, %f170;
	st.global.v2.f32 	[%rd29], {%f173, %f172};
	add.s32 	%r84, %r84, 4;
	setp.lt.u32	%p7, %r84, %r2;
	@%p7 bra 	BB1_9;

BB1_10:
	ld.global.u32 	%r11, [ray_payload+80];
	ld.global.u32 	%r38, [max_recursion_depth];
	setp.gt.u32	%p8, %r11, %r38;
	@%p8 bra 	BB1_12;
	bra.uni 	BB1_11;

BB1_12:
	mov.u32 	%r69, 0;
	st.global.u32 	[ray_payload+80], %r69;
	ld.global.f32 	%f187, [current_ray+20];
	ld.global.f32 	%f186, [current_ray+16];
	ld.global.f32 	%f185, [current_ray+12];
	mov.u64 	%rd92, traverse_backup_buffer;
	cvta.global.u64 	%rd33, %rd92;
	mov.u32 	%r67, 1;
	mov.u32 	%r68, 4;
	mov.u64 	%rd91, 0;
	// inline asm
	call (%rd32), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd91, %rd91, %rd91, %rd91);
	// inline asm
	atom.add.u32 	%r70, [%rd32], 1;
	mul.lo.s32 	%r71, %r70, 9;
	// inline asm
	mov.b32 	%r45, %f2;
	// inline asm
	add.s32 	%r72, %r71, 1;
	cvt.u64.u32	%rd40, %r72;
	// inline asm
	call (%rd38), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd40, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd38], %r45;
	// inline asm
	mov.b32 	%r48, %f3;
	// inline asm
	add.s32 	%r73, %r71, 2;
	cvt.u64.u32	%rd46, %r73;
	// inline asm
	call (%rd44), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd46, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd44], %r48;
	// inline asm
	mov.b32 	%r51, %f4;
	// inline asm
	add.s32 	%r74, %r71, 3;
	cvt.u64.u32	%rd52, %r74;
	// inline asm
	call (%rd50), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd52, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd50], %r51;
	// inline asm
	mov.b32 	%r54, %f185;
	// inline asm
	add.s32 	%r75, %r71, 4;
	cvt.u64.u32	%rd58, %r75;
	// inline asm
	call (%rd56), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd58, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd56], %r54;
	// inline asm
	mov.b32 	%r57, %f186;
	// inline asm
	add.s32 	%r76, %r71, 5;
	cvt.u64.u32	%rd64, %r76;
	// inline asm
	call (%rd62), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd64, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd62], %r57;
	// inline asm
	mov.b32 	%r60, %f187;
	// inline asm
	add.s32 	%r77, %r71, 6;
	cvt.u64.u32	%rd70, %r77;
	// inline asm
	call (%rd68), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd70, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd68], %r60;
	ld.global.u32 	%r78, [index];
	add.s32 	%r79, %r71, 7;
	cvt.u64.u32	%rd76, %r79;
	// inline asm
	call (%rd74), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd76, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd74], %r78;
	ld.global.u32 	%r80, [index+4];
	add.s32 	%r81, %r71, 8;
	cvt.u64.u32	%rd82, %r81;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd82, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd80], %r80;
	ld.global.u32 	%r82, [index+8];
	add.s32 	%r83, %r71, 9;
	cvt.u64.u32	%rd88, %r83;
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd33, %r67, %r68, %rd88, %rd91, %rd91, %rd91);
	// inline asm
	st.u32 	[%rd86], %r82;
	bra.uni 	BB1_13;

BB1_11:
	add.s32 	%r42, %r11, 1;
	mov.u64 	%rd31, ray_payload;
	st.global.u32 	[ray_payload+80], %r42;
	ld.global.f32 	%f181, [step_size];
	ld.global.f32 	%f179, [current_ray+20];
	ld.global.f32 	%f178, [current_ray+16];
	ld.global.f32 	%f177, [current_ray+12];
	ld.global.u32 	%r39, [ox_entry_node];
	cvta.global.u64 	%rd30, %rd31;
	mov.u32 	%r40, 0;
	mov.f32 	%f180, 0f00000000;
	mov.u32 	%r41, 96;
	// inline asm
	call _rt_trace_64, (%r39, %f2, %f3, %f4, %f177, %f178, %f179, %r40, %f180, %f181, %rd30, %r41);
	// inline asm

BB1_13:
	ret;
}

	// .globl	_Z28__ox_closest_hit_scattered__v
.visible .entry _Z28__ox_closest_hit_scattered__v(

)
{
	.reg .f32 	%f<5>;
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<8>;


	ld.global.u32 	%rd3, [ray_payload_scattered+24];
	mov.u64 	%rd7, importance_directions_buffer;
	cvta.global.u64 	%rd2, %rd7;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 8;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r1, %r2, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v2.f32 	{%f1, %f2}, [%rd1];
	st.global.v2.f32 	[ray_payload_scattered], {%f1, %f2};
	ret;
}

	// .globl	_Z21__ox_miss_scattered__v
.visible .entry _Z21__ox_miss_scattered__v(

)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<32>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<4>;


	ld.global.u32 	%r3, [ray_payload_scattered+16];
	add.s32 	%r1, %r3, 1;
	st.global.u32 	[ray_payload_scattered+16], %r1;
	ld.global.u32 	%r2, [max_recursion_depth];
	setp.gt.u32	%p1, %r1, %r2;
	@%p1 bra 	BB3_2;

	ld.global.f32 	%f9, [step_size];
	ld.global.f32 	%f4, [current_ray+12];
	ld.global.f32 	%f5, [current_ray+16];
	ld.global.f32 	%f6, [current_ray+20];
	ld.global.f32 	%f10, [current_ray];
	fma.rn.ftz.f32 	%f1, %f9, %f4, %f10;
	ld.global.f32 	%f11, [current_ray+4];
	fma.rn.ftz.f32 	%f2, %f9, %f5, %f11;
	ld.global.f32 	%f12, [current_ray+8];
	fma.rn.ftz.f32 	%f3, %f9, %f6, %f12;
	mul.ftz.f32 	%f13, %f9, 0f3F000000;
	fma.rn.ftz.f32 	%f14, %f4, %f13, %f10;
	fma.rn.ftz.f32 	%f15, %f13, %f5, %f11;
	fma.rn.ftz.f32 	%f16, %f13, %f6, %f12;
	setp.lt.u32	%p2, %r1, %r2;
	selp.f32	%f8, %f9, 0f6C4ECB8F, %p2;
	ld.global.u32 	%r4, [ox_entry_node];
	mov.u64 	%rd3, ray_payload_scattered;
	cvta.global.u64 	%rd1, %rd3;
	mov.u32 	%r5, 2;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r6, 32;
	// inline asm
	call _rt_trace_64, (%r4, %f1, %f2, %f3, %f4, %f5, %f6, %r5, %f7, %f8, %rd1, %r6);
	// inline asm
	ld.global.u32 	%r8, [ray_payload_scattered+28];
	ld.global.u32 	%r7, [absorption_factor];
	// inline asm
	call (%rd2), _rt_callable_program_from_id_64, (%r7);
	// inline asm
	// Callseq Start 28
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r8;
	.param .align 8 .b8 retval0[8];
	prototype_28 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd2, 
	(
	param0, 
	param1
	)
	, prototype_28;
	ld.param.f32	%f17, [retval0+0];
	ld.param.f32	%f18, [retval0+4];
	
	//{
	}// Callseq End 28
	ld.global.f32 	%f19, [step_size];
	mul.ftz.f32 	%f20, %f17, %f19;
	mul.ftz.f32 	%f21, %f18, %f19;
	mul.ftz.f32 	%f22, %f20, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f23, %f22;
	mul.ftz.f32 	%f24, %f21, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f25, %f24;
	ld.global.v2.f32 	{%f26, %f27}, [ray_payload_scattered];
	mul.ftz.f32 	%f29, %f25, %f27;
	mul.ftz.f32 	%f31, %f23, %f26;
	st.global.v2.f32 	[ray_payload_scattered], {%f31, %f29};

BB3_2:
	ret;
}


