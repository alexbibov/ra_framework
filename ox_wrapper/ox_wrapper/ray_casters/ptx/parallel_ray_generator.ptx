//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-22781540
// Cuda compilation tools, release 9.0, V9.0.176
// Based on LLVM 3.4svn
//

.version 6.0
.target sm_50
.address_size 64

	// .globl	_Z15__ox_generate__v
.global .align 4 .u32 num_rays;
.global .align 4 .f32 emitter_position;
.global .align 4 .f32 emitter_size;
.global .align 4 .f32 emitter_rotation;
.global .align 4 .b8 ox_entry_node[4];
.global .align 4 .b8 index[4];
.global .align 1 .b8 ox_output_buffer[1];
.global .align 1 .b8 ox_init_spectral_flux_buffer[1];
.global .align 4 .b8 _ZN21rti_internal_typeinfo8num_raysE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16emitter_positionE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12emitter_sizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16emitter_rotationE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13ox_entry_nodeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5indexE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 16 .b8 _ZN21rti_internal_typename8num_raysE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename16emitter_positionE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename12emitter_sizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename16emitter_rotationE[6] = {102, 108, 111, 97, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename13ox_entry_nodeE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename5indexE[13] = {111, 112, 116, 105, 120, 58, 58, 117, 105, 110, 116, 49, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8num_raysE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16emitter_positionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12emitter_sizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16emitter_rotationE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13ox_entry_nodeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5indexE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8num_raysE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16emitter_positionE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12emitter_sizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16emitter_rotationE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13ox_entry_nodeE[1];
.global .align 16 .b8 _ZN21rti_internal_semantic5indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation8num_raysE[24] = {34, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 97, 115, 116, 101, 100, 32, 114, 97, 121, 115, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation16emitter_positionE[26] = {34, 80, 111, 115, 105, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 101, 32, 101, 109, 105, 116, 116, 101, 114, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation12emitter_sizeE[22] = {34, 83, 105, 122, 101, 32, 111, 102, 32, 116, 104, 101, 32, 101, 109, 105, 116, 116, 101, 114, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation16emitter_rotationE[26] = {34, 82, 111, 116, 97, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 101, 32, 101, 109, 105, 116, 116, 101, 114, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation13ox_entry_nodeE[19] = {34, 83, 99, 101, 110, 101, 32, 101, 110, 116, 114, 121, 32, 110, 111, 100, 101, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation5indexE[15] = {34, 84, 104, 114, 101, 97, 100, 32, 105, 110, 100, 101, 120, 34, 0};

.visible .entry _Z15__ox_generate__v(

)
{
	.local .align 16 .b8 	__local_depot0[80];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<38>;
	.reg .b32 	%r<82>;
	.reg .b64 	%rd<101>;


	mov.u64 	%rd100, __local_depot0;
	cvta.local.u64 	%SP, %rd100;
	ld.global.f32 	%f9, [emitter_size];
	neg.ftz.f32 	%f10, %f9;
	mov.f32 	%f11, 0f40000000;
	div.approx.ftz.f32 	%f12, %f10, %f11;
	ld.global.u32 	%r36, [num_rays];
	add.s32 	%r37, %r36, -1;
	cvt.rn.f32.u32	%f13, %r37;
	div.approx.ftz.f32 	%f14, %f9, %f13;
	ld.global.u32 	%r38, [index];
	cvt.rn.f32.u32	%f15, %r38;
	fma.rn.ftz.f32 	%f16, %f14, %f15, %f12;
	ld.global.f32 	%f17, [emitter_rotation];
	cos.approx.ftz.f32 	%f5, %f17;
	sin.approx.ftz.f32 	%f18, %f17;
	mul.ftz.f32 	%f19, %f5, %f16;
	mul.ftz.f32 	%f20, %f18, 0f00000000;
	sub.ftz.f32 	%f1, %f19, %f20;
	mul.ftz.f32 	%f21, %f18, %f1;
	fma.rn.ftz.f32 	%f2, %f5, 0f00000000, %f21;
	shl.b32 	%r39, %r38, 4;
	cvt.u64.u32	%rd3, %r39;
	mov.u64 	%rd98, ox_init_spectral_flux_buffer;
	cvta.global.u64 	%rd2, %rd98;
	mov.u32 	%r31, 1;
	mov.u32 	%r32, 4;
	mov.u64 	%rd96, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd3, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r40, [index];
	shl.b32 	%r41, %r40, 4;
	add.s32 	%r42, %r41, 1;
	cvt.u64.u32	%rd9, %r42;
	ld.f32 	%f22, [%rd1];
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd9, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r43, [index];
	shl.b32 	%r44, %r43, 4;
	add.s32 	%r45, %r44, 2;
	cvt.u64.u32	%rd15, %r45;
	ld.f32 	%f23, [%rd7];
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd15, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r46, [index];
	shl.b32 	%r47, %r46, 4;
	add.s32 	%r48, %r47, 3;
	cvt.u64.u32	%rd21, %r48;
	ld.f32 	%f24, [%rd13];
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd21, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r49, [index];
	shl.b32 	%r50, %r49, 4;
	cvt.u64.u32	%rd27, %r50;
	ld.f32 	%f25, [%rd19];
	// inline asm
	call (%rd25), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd27, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r51, [index];
	shl.b32 	%r52, %r51, 4;
	add.s32 	%r53, %r52, 1;
	cvt.u64.u32	%rd33, %r53;
	ld.f32 	%f26, [%rd25];
	// inline asm
	call (%rd31), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd33, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r54, [index];
	shl.b32 	%r55, %r54, 4;
	add.s32 	%r56, %r55, 2;
	cvt.u64.u32	%rd39, %r56;
	ld.f32 	%f27, [%rd31];
	// inline asm
	call (%rd37), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd39, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r57, [index];
	shl.b32 	%r58, %r57, 4;
	add.s32 	%r59, %r58, 3;
	cvt.u64.u32	%rd45, %r59;
	ld.f32 	%f28, [%rd37];
	// inline asm
	call (%rd43), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd45, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r60, [index];
	shl.b32 	%r61, %r60, 4;
	cvt.u64.u32	%rd51, %r61;
	ld.f32 	%f29, [%rd43];
	// inline asm
	call (%rd49), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd51, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r62, [index];
	shl.b32 	%r63, %r62, 4;
	add.s32 	%r64, %r63, 1;
	cvt.u64.u32	%rd57, %r64;
	ld.f32 	%f30, [%rd49];
	// inline asm
	call (%rd55), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd57, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r65, [index];
	shl.b32 	%r66, %r65, 4;
	add.s32 	%r67, %r66, 2;
	cvt.u64.u32	%rd63, %r67;
	ld.f32 	%f31, [%rd55];
	// inline asm
	call (%rd61), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd63, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r68, [index];
	shl.b32 	%r69, %r68, 4;
	add.s32 	%r70, %r69, 3;
	cvt.u64.u32	%rd69, %r70;
	ld.f32 	%f32, [%rd61];
	// inline asm
	call (%rd67), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd69, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r71, [index];
	shl.b32 	%r72, %r71, 4;
	cvt.u64.u32	%rd75, %r72;
	ld.f32 	%f33, [%rd67];
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd75, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r73, [index];
	shl.b32 	%r74, %r73, 4;
	add.s32 	%r75, %r74, 1;
	cvt.u64.u32	%rd81, %r75;
	ld.f32 	%f34, [%rd73];
	// inline asm
	call (%rd79), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd81, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r76, [index];
	shl.b32 	%r77, %r76, 4;
	add.s32 	%r78, %r77, 2;
	cvt.u64.u32	%rd87, %r78;
	ld.f32 	%f35, [%rd79];
	// inline asm
	call (%rd85), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd87, %rd96, %rd96, %rd96);
	// inline asm
	ld.global.u32 	%r79, [index];
	shl.b32 	%r80, %r79, 4;
	add.s32 	%r81, %r80, 3;
	cvt.u64.u32	%rd93, %r81;
	ld.f32 	%f36, [%rd85];
	// inline asm
	call (%rd91), _rt_buffer_get_64, (%rd2, %r31, %r32, %rd93, %rd96, %rd96, %rd96);
	// inline asm
	neg.ftz.f32 	%f4, %f18;
	add.u64 	%rd97, %SP, 0;
	cvta.to.local.u64 	%rd99, %rd97;
	ld.f32 	%f37, [%rd91];
	mov.u16 	%rs1, 0;
	st.local.v4.u8 	[%rd99+76], {%rs1, %rs1, %rs1, %rs1};
	st.local.v4.u8 	[%rd99+72], {%rs1, %rs1, %rs1, %rs1};
	mov.u32 	%r34, 0;
	st.local.v2.u32 	[%rd99+64], {%r34, %r34};
	mov.f32 	%f7, 0f00000000;
	st.local.v4.f32 	[%rd99+48], {%f7, %f7, %f7, %f7};
	st.local.v4.f32 	[%rd99+32], {%f7, %f7, %f7, %f7};
	st.local.v4.f32 	[%rd99+16], {%f7, %f7, %f7, %f7};
	st.local.v4.f32 	[%rd99], {%f7, %f7, %f7, %f7};
	st.local.v4.f32 	[%rd99], {%f22, %f23, %f24, %f25};
	st.local.v4.f32 	[%rd99+16], {%f26, %f27, %f28, %f29};
	st.local.v4.f32 	[%rd99+32], {%f30, %f31, %f32, %f33};
	st.local.v4.f32 	[%rd99+48], {%f34, %f35, %f36, %f37};
	st.local.v2.u32 	[%rd99+64], {%r34, %r34};
	ld.global.u32 	%r33, [ox_entry_node];
	mov.f32 	%f8, 0f6C4ECB8F;
	mov.u32 	%r35, 80;
	// inline asm
	call _rt_trace_64, (%r33, %f1, %f2, %f7, %f4, %f5, %f7, %r34, %f7, %f8, %rd97, %r35);
	// inline asm
	ret;
}


