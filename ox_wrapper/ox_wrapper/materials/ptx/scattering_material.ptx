//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_50
.address_size 64

	// .globl	_Z16__ox_intersect__v
.global .align 4 .b8 ox_entry_node[4];
.global .align 4 .f32 step_size;
.global .align 4 .u32 max_recursion_depth;
.global .align 4 .u32 num_spectra_pairs_supported;
.global .align 4 .u32 num_importance_directions;
.global .align 4 .b8 absorption_factor[4];
.global .align 4 .b8 scattering_factor[4];
.global .align 4 .b8 phase_function[4];
.global .align 16 .b8 ray_payload[80];
.global .align 16 .b8 ray_payload_scattered[32];
.global .align 4 .f32 intersection_distance;
.global .align 4 .b8 current_ray[36];
.global .align 4 .b8 index[12];
.global .align 4 .b8 normal[12];
.global .align 1 .b8 importance_directions_buffer[1];
.global .align 1 .b8 traverse_backup_buffer[1];
.global .align 4 .b8 _ZN21rti_internal_typeinfo13ox_entry_nodeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9step_sizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19max_recursion_depthE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo27num_spectra_pairs_supportedE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo25num_importance_directionsE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo17absorption_factorE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo17scattering_factorE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14phase_functionE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11ray_payloadE[8] = {82, 97, 121, 0, 80, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo21ray_payload_scatteredE[8] = {82, 97, 121, 0, 32, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo21intersection_distanceE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11current_rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5indexE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 16 .b8 _ZN21rti_internal_typename13ox_entry_nodeE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename9step_sizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename19max_recursion_depthE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename27num_spectra_pairs_supportedE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename25num_importance_directionsE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename17absorption_factorE[34] = {97, 98, 115, 111, 114, 112, 116, 105, 111, 110, 95, 102, 97, 99, 116, 111, 114, 95, 112, 114, 111, 103, 114, 97, 109, 95, 105, 100, 95, 116, 121, 112, 101, 0};
.global .align 16 .b8 _ZN21rti_internal_typename17scattering_factorE[34] = {115, 99, 97, 116, 116, 101, 114, 105, 110, 103, 95, 102, 97, 99, 116, 111, 114, 95, 112, 114, 111, 103, 114, 97, 109, 95, 105, 100, 95, 116, 121, 112, 101, 0};
.global .align 16 .b8 _ZN21rti_internal_typename14phase_functionE[31] = {112, 104, 97, 115, 101, 95, 102, 117, 110, 99, 116, 105, 111, 110, 95, 112, 114, 111, 103, 114, 97, 109, 95, 105, 100, 95, 116, 121, 112, 101, 0};
.global .align 16 .b8 _ZN21rti_internal_typename11ray_payloadE[33] = {111, 120, 95, 119, 114, 97, 112, 112, 101, 114, 58, 58, 79, 120, 82, 97, 121, 82, 97, 100, 105, 97, 110, 99, 101, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 16 .b8 _ZN21rti_internal_typename21ray_payload_scatteredE[39] = {111, 120, 95, 119, 114, 97, 112, 112, 101, 114, 58, 58, 79, 120, 82, 97, 121, 82, 97, 100, 105, 97, 110, 99, 101, 80, 97, 121, 108, 111, 97, 100, 83, 105, 109, 112, 108, 101, 0};
.global .align 8 .b8 _ZN21rti_internal_typename21intersection_distanceE[6] = {102, 108, 111, 97, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename11current_rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 16 .b8 _ZN21rti_internal_typename5indexE[14] = {111, 112, 116, 105, 120, 58, 58, 102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename6normalE[14] = {111, 112, 116, 105, 120, 58, 58, 102, 108, 111, 97, 116, 51, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum13ox_entry_nodeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9step_sizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19max_recursion_depthE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum27num_spectra_pairs_supportedE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum25num_importance_directionsE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum17absorption_factorE = 4920;
.global .align 4 .u32 _ZN21rti_internal_typeenum17scattering_factorE = 4920;
.global .align 4 .u32 _ZN21rti_internal_typeenum14phase_functionE = 4920;
.global .align 4 .u32 _ZN21rti_internal_typeenum11ray_payloadE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum21ray_payload_scatteredE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum21intersection_distanceE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11current_rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic13ox_entry_nodeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9step_sizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19max_recursion_depthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic27num_spectra_pairs_supportedE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic25num_importance_directionsE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic17absorption_factorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic17scattering_factorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14phase_functionE[1];
.global .align 16 .b8 _ZN21rti_internal_semantic11ray_payloadE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic21ray_payload_scatteredE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic21intersection_distanceE[23] = {114, 116, 73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 68, 105, 115, 116, 97, 110, 99, 101, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic11current_rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic5indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[21] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 97, 116, 116, 114, 78, 111, 114, 109, 97, 108, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation13ox_entry_nodeE[19] = {34, 83, 99, 101, 110, 101, 32, 101, 110, 116, 114, 121, 32, 110, 111, 100, 101, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation9step_sizeE[25] = {34, 82, 97, 121, 32, 109, 97, 114, 99, 104, 105, 110, 103, 32, 115, 116, 101, 112, 32, 115, 105, 122, 101, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation19max_recursion_depthE[53] = {34, 77, 97, 120, 105, 109, 97, 108, 32, 100, 101, 112, 116, 104, 32, 111, 102, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 32, 102, 111, 114, 32, 115, 99, 97, 116, 116, 101, 114, 105, 110, 103, 32, 116, 114, 97, 118, 101, 114, 115, 101, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation27num_spectra_pairs_supportedE[31] = {34, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 119, 97, 118, 101, 108, 101, 110, 103, 116, 104, 115, 32, 105, 110, 32, 117, 115, 101, 34, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation25num_importance_directionsE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation17absorption_factorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation17scattering_factorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14phase_functionE[1];
.global .align 16 .b8 _ZN23rti_internal_annotation11ray_payloadE[22] = {34, 67, 117, 114, 114, 101, 110, 116, 32, 114, 97, 121, 32, 112, 97, 121, 108, 111, 97, 100, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation21ray_payload_scatteredE[40] = {34, 80, 97, 121, 108, 111, 97, 100, 32, 111, 102, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 115, 99, 97, 116, 116, 101, 114, 105, 110, 103, 32, 114, 97, 121, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation21intersection_distanceE[58] = {34, 80, 97, 114, 97, 109, 101, 116, 114, 105, 99, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 102, 114, 111, 109, 32, 114, 97, 121, 32, 111, 114, 105, 103, 105, 110, 32, 116, 111, 32, 116, 104, 101, 32, 105, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation11current_rayE[26] = {34, 67, 117, 114, 114, 101, 110, 116, 108, 121, 32, 116, 114, 97, 118, 101, 114, 115, 101, 100, 32, 114, 97, 121, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation5indexE[27] = {34, 73, 110, 100, 101, 120, 32, 111, 102, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 114, 97, 121, 34, 0};
.global .align 16 .b8 _ZN23rti_internal_annotation6normalE[34] = {34, 78, 111, 114, 109, 97, 108, 32, 111, 102, 32, 116, 104, 101, 32, 115, 117, 114, 102, 97, 99, 101, 32, 98, 101, 105, 110, 103, 32, 104, 105, 116, 34, 0};

.visible .entry _Z16__ox_intersect__v(

)
{
	.local .align 16 .b8 	__local_depot0[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<19>;
	.reg .f32 	%f<177>;
	.reg .b32 	%r<106>;
	.reg .b64 	%rd<84>;


	mov.u64 	%rd83, __local_depot0;
	cvta.local.u64 	%SP, %rd83;
	ld.global.f32 	%f1, [current_ray+12];
	ld.global.f32 	%f33, [normal];
	ld.global.f32 	%f2, [current_ray+16];
	ld.global.f32 	%f34, [normal+4];
	mul.ftz.f32 	%f35, %f34, %f2;
	fma.rn.ftz.f32 	%f36, %f33, %f1, %f35;
	ld.global.f32 	%f3, [current_ray+20];
	ld.global.f32 	%f37, [normal+8];
	fma.rn.ftz.f32 	%f4, %f37, %f3, %f36;
	setp.lt.ftz.f32	%p1, %f4, 0f80000000;
	mov.f32 	%f170, 0f3F800000;
	@%p1 bra 	BB0_2;

	setp.gt.ftz.f32	%p2, %f4, 0f80000000;
	selp.f32	%f170, 0fBF800000, 0f00000000, %p2;

BB0_2:
	ld.global.u32 	%r21, [ray_payload+68];
	cvt.rzi.ftz.s32.f32	%r1, %f170;
	add.s32 	%r22, %r21, %r1;
	mov.u32 	%r23, 0;
	max.s32 	%r24, %r23, %r22;
	st.global.u32 	[ray_payload+68], %r24;
	ld.global.f32 	%f7, [intersection_distance];
	ld.global.f32 	%f8, [current_ray];
	fma.rn.ftz.f32 	%f9, %f7, %f1, %f8;
	ld.global.f32 	%f10, [current_ray+4];
	fma.rn.ftz.f32 	%f11, %f7, %f2, %f10;
	ld.global.f32 	%f12, [current_ray+8];
	fma.rn.ftz.f32 	%f13, %f7, %f3, %f12;
	setp.gt.s32	%p3, %r1, 0;
	@%p3 bra 	BB0_14;
	bra.uni 	BB0_3;

BB0_14:
	ld.global.u32 	%r53, [ray_payload+64];
	add.s32 	%r105, %r53, 1;
	st.global.u32 	[ray_payload+64], %r105;
	ld.global.u32 	%r104, [max_recursion_depth];
	setp.gt.u32	%p17, %r105, %r104;
	@%p17 bra 	BB0_16;

	mov.u32 	%r54, 8388608;
	// inline asm
	mov.b32 	%f152, %r54;
	// inline asm
	fma.rn.ftz.f32 	%f153, %f152, %f1, %f9;
	fma.rn.ftz.f32 	%f154, %f152, %f2, %f11;
	fma.rn.ftz.f32 	%f155, %f152, %f3, %f13;
	ld.global.f32 	%f160, [step_size];
	ld.global.f32 	%f158, [current_ray+20];
	ld.global.f32 	%f157, [current_ray+16];
	ld.global.f32 	%f156, [current_ray+12];
	ld.global.u32 	%r55, [ox_entry_node];
	mov.u64 	%rd21, ray_payload;
	cvta.global.u64 	%rd20, %rd21;
	mov.u32 	%r56, 0;
	mov.f32 	%f159, 0f00000000;
	mov.u32 	%r57, 80;
	// inline asm
	call _rt_trace_64, (%r55, %f153, %f154, %f155, %f156, %f157, %f158, %r56, %f159, %f160, %rd20, %r57);
	// inline asm
	ld.global.u32 	%r105, [ray_payload+64];
	ld.global.u32 	%r104, [max_recursion_depth];

BB0_16:
	setp.le.u32	%p18, %r105, %r104;
	@%p18 bra 	BB0_18;

	mov.u32 	%r84, 0;
	st.global.u32 	[ray_payload+64], %r84;
	ld.global.f32 	%f163, [current_ray+8];
	ld.global.f32 	%f162, [current_ray+4];
	ld.global.f32 	%f161, [current_ray];
	ld.global.f32 	%f166, [current_ray+20];
	ld.global.f32 	%f165, [current_ray+16];
	ld.global.f32 	%f164, [current_ray+12];
	mov.u64 	%rd82, traverse_backup_buffer;
	cvta.global.u64 	%rd23, %rd82;
	mov.u32 	%r82, 1;
	mov.u32 	%r83, 4;
	mov.u64 	%rd81, 0;
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd81, %rd81, %rd81, %rd81);
	// inline asm
	atom.add.u32 	%r85, [%rd22], 1;
	mul.lo.s32 	%r86, %r85, 9;
	// inline asm
	mov.b32 	%r60, %f161;
	// inline asm
	add.s32 	%r87, %r86, 1;
	cvt.u64.u32	%rd30, %r87;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd30, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd28], %r60;
	// inline asm
	mov.b32 	%r63, %f162;
	// inline asm
	add.s32 	%r88, %r86, 2;
	cvt.u64.u32	%rd36, %r88;
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd36, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd34], %r63;
	// inline asm
	mov.b32 	%r66, %f163;
	// inline asm
	add.s32 	%r89, %r86, 3;
	cvt.u64.u32	%rd42, %r89;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd42, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd40], %r66;
	// inline asm
	mov.b32 	%r69, %f164;
	// inline asm
	add.s32 	%r90, %r86, 4;
	cvt.u64.u32	%rd48, %r90;
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd48, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd46], %r69;
	// inline asm
	mov.b32 	%r72, %f165;
	// inline asm
	add.s32 	%r91, %r86, 5;
	cvt.u64.u32	%rd54, %r91;
	// inline asm
	call (%rd52), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd54, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd52], %r72;
	// inline asm
	mov.b32 	%r75, %f166;
	// inline asm
	add.s32 	%r92, %r86, 6;
	cvt.u64.u32	%rd60, %r92;
	// inline asm
	call (%rd58), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd60, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd58], %r75;
	ld.global.f32 	%f167, [index];
	cvt.rzi.ftz.u32.f32	%r93, %f167;
	add.s32 	%r94, %r86, 7;
	cvt.u64.u32	%rd66, %r94;
	// inline asm
	call (%rd64), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd66, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd64], %r93;
	ld.global.f32 	%f168, [index+4];
	cvt.rzi.ftz.u32.f32	%r95, %f168;
	add.s32 	%r96, %r86, 8;
	cvt.u64.u32	%rd72, %r96;
	// inline asm
	call (%rd70), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd72, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd70], %r95;
	ld.global.f32 	%f169, [index+8];
	cvt.rzi.ftz.u32.f32	%r97, %f169;
	add.s32 	%r98, %r86, 9;
	cvt.u64.u32	%rd78, %r98;
	// inline asm
	call (%rd76), _rt_buffer_get_64, (%rd23, %r82, %r83, %rd78, %rd81, %rd81, %rd81);
	// inline asm
	st.u32 	[%rd76], %r97;
	bra.uni 	BB0_18;

BB0_3:
	setp.gt.s32	%p4, %r1, -1;
	@%p4 bra 	BB0_18;

	mul.ftz.f32 	%f38, %f7, 0f3F000000;
	fma.rn.ftz.f32 	%f14, %f1, %f38, %f8;
	fma.rn.ftz.f32 	%f15, %f38, %f2, %f10;
	fma.rn.ftz.f32 	%f16, %f38, %f3, %f12;
	ld.global.f32 	%f39, [current_ray+12];
	ld.global.f32 	%f40, [current_ray+16];
	ld.global.f32 	%f41, [current_ray+20];
	abs.ftz.f32 	%f42, %f41;
	mov.f32 	%f43, 0f3F800000;
	sub.ftz.f32 	%f44, %f43, %f42;
	mul.ftz.f32 	%f45, %f44, 0f3F000000;
	sqrt.approx.ftz.f32 	%f46, %f45;
	setp.gt.ftz.f32	%p5, %f42, 0f3F11EB85;
	selp.f32	%f47, %f46, %f42, %p5;
	mul.ftz.f32 	%f48, %f47, %f47;
	mov.f32 	%f49, 0f3C94D2E9;
	mov.f32 	%f50, 0f3D53F941;
	fma.rn.ftz.f32 	%f51, %f50, %f48, %f49;
	mov.f32 	%f52, 0f3D3F841F;
	fma.rn.ftz.f32 	%f53, %f51, %f48, %f52;
	mov.f32 	%f54, 0f3D994929;
	fma.rn.ftz.f32 	%f55, %f53, %f48, %f54;
	mov.f32 	%f56, 0f3E2AAB94;
	fma.rn.ftz.f32 	%f57, %f55, %f48, %f56;
	mul.ftz.f32 	%f58, %f48, %f57;
	fma.rn.ftz.f32 	%f59, %f58, %f47, %f47;
	add.ftz.f32 	%f60, %f59, %f59;
	mov.f32 	%f61, 0f3FC90FDB;
	sub.ftz.f32 	%f62, %f61, %f59;
	selp.f32	%f63, %f60, %f62, %p5;
	setp.lt.ftz.f32	%p6, %f41, 0f00000000;
	mov.f32 	%f64, 0f40490FDB;
	sub.ftz.f32 	%f65, %f64, %f63;
	selp.f32	%f17, %f65, %f63, %p6;
	mul.ftz.f32 	%f66, %f40, %f40;
	fma.rn.ftz.f32 	%f67, %f39, %f39, %f66;
	sqrt.approx.ftz.f32 	%f68, %f67;
	div.approx.ftz.f32 	%f69, %f39, %f68;
	setp.ltu.ftz.f32	%p7, %f40, 0f00000000;
	selp.f32	%f70, 0fBF800000, 0f3F800000, %p7;
	mul.ftz.f32 	%f71, %f70, %f69;
	abs.ftz.f32 	%f72, %f71;
	sub.ftz.f32 	%f73, %f43, %f72;
	mul.ftz.f32 	%f74, %f73, 0f3F000000;
	sqrt.approx.ftz.f32 	%f75, %f74;
	setp.gt.ftz.f32	%p8, %f72, 0f3F11EB85;
	selp.f32	%f76, %f75, %f72, %p8;
	mul.ftz.f32 	%f77, %f76, %f76;
	fma.rn.ftz.f32 	%f78, %f50, %f77, %f49;
	fma.rn.ftz.f32 	%f79, %f78, %f77, %f52;
	fma.rn.ftz.f32 	%f80, %f79, %f77, %f54;
	fma.rn.ftz.f32 	%f81, %f80, %f77, %f56;
	mul.ftz.f32 	%f82, %f77, %f81;
	fma.rn.ftz.f32 	%f83, %f82, %f76, %f76;
	add.ftz.f32 	%f84, %f83, %f83;
	sub.ftz.f32 	%f85, %f61, %f83;
	selp.f32	%f86, %f84, %f85, %p8;
	setp.lt.ftz.f32	%p9, %f71, 0f00000000;
	sub.ftz.f32 	%f87, %f64, %f86;
	selp.f32	%f88, %f87, %f86, %p9;
	setp.lt.ftz.f32	%p10, %f40, 0f00000000;
	selp.f32	%f89, 0f40490FDB, 0f00000000, %p10;
	add.ftz.f32 	%f18, %f89, %f88;
	ld.global.u32 	%r25, [num_spectra_pairs_supported];
	mov.u32 	%r26, 8;
	min.u32 	%r2, %r26, %r25;
	setp.eq.s32	%p11, %r2, 0;
	@%p11 bra 	BB0_12;

	add.s32 	%r3, %r2, 1;
	add.u64 	%rd2, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd2;
	mov.u32 	%r99, %r23;

BB0_6:
	ld.global.u32 	%r29, [num_importance_directions];
	setp.eq.s32	%p12, %r29, 0;
	mov.f32 	%f175, 0f00000000;
	mov.u32 	%r103, %r23;
	mov.f32 	%f173, %f175;
	mov.f32 	%f174, %f175;
	@%p12 bra 	BB0_9;

	add.s32 	%r101, %r99, 1;
	mov.f32 	%f93, 0f00000000;
	mov.u32 	%r100, 0;
	mov.u32 	%r102, %r100;
	mov.f32 	%f173, %f93;
	mov.f32 	%f174, %f93;

BB0_8:
	st.local.v2.f32 	[%rd1], {%f93, %f93};
	st.local.v2.u32 	[%rd1+24], {%r101, %r99};
	ld.global.v2.u32 	{%r38, %r39}, [ray_payload+64];
	add.s32 	%r42, %r38, 1;
	st.local.v2.u32 	[%rd1+16], {%r42, %r39};
	cvt.u64.u32	%rd5, %r100;
	mov.u64 	%rd11, importance_directions_buffer;
	cvta.global.u64 	%rd4, %rd11;
	mov.u32 	%r32, 1;
	mov.u64 	%rd8, 0;
	// inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r32, %r26, %rd5, %rd8, %rd8, %rd8);
	// inline asm
	ld.v2.f32 	{%f102, %f103}, [%rd3];
	cos.approx.ftz.f32 	%f99, %f102;
	sin.approx.ftz.f32 	%f106, %f102;
	cos.approx.ftz.f32 	%f107, %f103;
	mul.ftz.f32 	%f97, %f106, %f107;
	sin.approx.ftz.f32 	%f108, %f103;
	mul.ftz.f32 	%f98, %f106, %f108;
	ld.global.f32 	%f101, [step_size];
	ld.global.u32 	%r34, [ox_entry_node];
	mov.u32 	%r35, 2;
	mov.u32 	%r36, 32;
	// inline asm
	call _rt_trace_64, (%r34, %f9, %f11, %f13, %f97, %f98, %f99, %r35, %f93, %f101, %rd2, %r36);
	// inline asm
	ld.global.u32 	%r37, [phase_function];
	// inline asm
	call (%rd10), _rt_callable_program_from_id_64, (%r37);
	// inline asm
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .align 8 .b8 param1[8];
	st.param.f32	[param1+0], %f102;
	st.param.f32	[param1+4], %f103;
	.param .align 8 .b8 param2[8];
	st.param.f32	[param2+0], %f17;
	st.param.f32	[param2+4], %f18;
	.param .b32 param3;
	st.param.b32	[param3+0], %r99;
	.param .align 8 .b8 retval0[8];
	prototype_0 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .align 8 .b8 _[8], .param .align 8 .b8 _[8], .param .b32 _);
	call (retval0), 
	%rd10, 
	(
	param0, 
	param1, 
	param2, 
	param3
	)
	, prototype_0;
	ld.param.f32	%f109, [retval0+0];
	ld.param.f32	%f110, [retval0+4];
	
	//{
	}// Callseq End 0
	ld.local.v2.f32 	{%f111, %f112}, [%rd1];
	mul.ftz.f32 	%f114, %f111, %f109;
	mul.ftz.f32 	%f116, %f110, %f112;
	fma.rn.ftz.f32 	%f174, %f114, %f106, %f174;
	fma.rn.ftz.f32 	%f173, %f116, %f106, %f173;
	add.s32 	%r101, %r101, %r3;
	add.s32 	%r100, %r100, %r3;
	ld.global.u32 	%r103, [num_importance_directions];
	add.s32 	%r102, %r102, 1;
	setp.lt.u32	%p13, %r102, %r103;
	@%p13 bra 	BB0_8;

BB0_9:
	setp.eq.s32	%p14, %r103, 0;
	mov.f32 	%f176, %f175;
	@%p14 bra 	BB0_11;

	ld.global.u32 	%r43, [scattering_factor];
	// inline asm
	call (%rd12), _rt_callable_program_from_id_64, (%r43);
	// inline asm
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r99;
	.param .align 8 .b8 retval0[8];
	prototype_1 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd12, 
	(
	param0, 
	param1
	)
	, prototype_1;
	ld.param.f32	%f175, [retval0+0];
	ld.param.f32	%f176, [retval0+4];
	
	//{
	}// Callseq End 1

BB0_11:
	ld.global.u32 	%r44, [absorption_factor];
	// inline asm
	call (%rd13), _rt_callable_program_from_id_64, (%r44);
	// inline asm
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r99;
	.param .align 8 .b8 retval0[8];
	prototype_2 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd13, 
	(
	param0, 
	param1
	)
	, prototype_2;
	ld.param.f32	%f119, [retval0+0];
	ld.param.f32	%f120, [retval0+4];
	
	//{
	}// Callseq End 2
	add.ftz.f32 	%f121, %f175, %f119;
	add.ftz.f32 	%f122, %f176, %f120;
	ld.global.f32 	%f123, [intersection_distance];
	mul.ftz.f32 	%f124, %f123, %f121;
	mul.ftz.f32 	%f125, %f123, %f122;
	mul.ftz.f32 	%f126, %f124, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f127, %f126;
	mul.ftz.f32 	%f128, %f125, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f129, %f128;
	mul.wide.u32 	%rd15, %r99, 8;
	mov.u64 	%rd16, ray_payload;
	add.s64 	%rd17, %rd16, %rd15;
	ld.global.v2.f32 	{%f130, %f131}, [%rd17];
	ld.global.u32 	%r45, [scattering_factor];
	// inline asm
	call (%rd14), _rt_callable_program_from_id_64, (%r45);
	// inline asm
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f9;
	st.param.f32	[param0+4], %f11;
	st.param.f32	[param0+8], %f13;
	.param .b32 param1;
	st.param.b32	[param1+0], %r99;
	.param .align 8 .b8 retval0[8];
	prototype_3 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd14, 
	(
	param0, 
	param1
	)
	, prototype_3;
	ld.param.f32	%f134, [retval0+0];
	ld.param.f32	%f135, [retval0+4];
	
	//{
	}// Callseq End 3
	mul.ftz.f32 	%f136, %f174, %f134;
	mul.ftz.f32 	%f137, %f173, %f135;
	ld.global.f32 	%f138, [intersection_distance];
	mul.ftz.f32 	%f139, %f138, %f136;
	mul.ftz.f32 	%f140, %f138, %f137;
	fma.rn.ftz.f32 	%f141, %f129, %f131, %f140;
	fma.rn.ftz.f32 	%f142, %f127, %f130, %f139;
	st.global.v2.f32 	[%rd17], {%f142, %f141};
	add.s32 	%r99, %r99, 1;
	setp.lt.u32	%p15, %r99, %r2;
	@%p15 bra 	BB0_6;

BB0_12:
	ld.global.u32 	%r46, [ray_payload+64];
	add.s32 	%r47, %r46, 1;
	st.global.u32 	[ray_payload+64], %r47;
	ld.global.u32 	%r48, [max_recursion_depth];
	setp.gt.u32	%p16, %r47, %r48;
	@%p16 bra 	BB0_18;

	mov.u32 	%r49, 8388608;
	// inline asm
	mov.b32 	%f143, %r49;
	// inline asm
	ld.global.f32 	%f147, [current_ray+12];
	ld.global.f32 	%f148, [current_ray+16];
	ld.global.f32 	%f149, [current_ray+20];
	fma.rn.ftz.f32 	%f144, %f143, %f147, %f9;
	fma.rn.ftz.f32 	%f145, %f143, %f148, %f11;
	fma.rn.ftz.f32 	%f146, %f143, %f149, %f13;
	ld.global.u32 	%r50, [ox_entry_node];
	mov.u64 	%rd19, ray_payload;
	cvta.global.u64 	%rd18, %rd19;
	mov.u32 	%r51, 0;
	mov.f32 	%f150, 0f00000000;
	mov.f32 	%f151, 0f6C4ECB8F;
	mov.u32 	%r52, 80;
	// inline asm
	call _rt_trace_64, (%r50, %f144, %f145, %f146, %f147, %f148, %f149, %r51, %f150, %f151, %rd18, %r52);
	// inline asm

BB0_18:
	ret;
}

	// .globl	_Z11__ox_miss__v
.visible .entry _Z11__ox_miss__v(

)
{
	.local .align 16 .b8 	__local_depot1[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<15>;
	.reg .f32 	%f<154>;
	.reg .b32 	%r<52>;
	.reg .b64 	%rd<21>;


	mov.u64 	%rd20, __local_depot1;
	cvta.local.u64 	%SP, %rd20;
	ld.global.u32 	%r17, [max_recursion_depth];
	ld.global.v2.u32 	{%r51, %r19}, [ray_payload+64];
	setp.gt.u32	%p1, %r51, %r17;
	setp.eq.s32	%p2, %r19, 0;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB1_11;

	ld.global.f32 	%f31, [intersection_distance];
	ld.global.f32 	%f151, [current_ray+12];
	ld.global.f32 	%f152, [current_ray+16];
	ld.global.f32 	%f153, [current_ray+20];
	ld.global.f32 	%f32, [current_ray];
	fma.rn.ftz.f32 	%f1, %f31, %f151, %f32;
	ld.global.f32 	%f33, [current_ray+4];
	fma.rn.ftz.f32 	%f2, %f31, %f152, %f33;
	ld.global.f32 	%f34, [current_ray+8];
	fma.rn.ftz.f32 	%f3, %f31, %f153, %f34;
	mul.ftz.f32 	%f35, %f31, 0f3F000000;
	fma.rn.ftz.f32 	%f7, %f151, %f35, %f32;
	fma.rn.ftz.f32 	%f8, %f35, %f152, %f33;
	fma.rn.ftz.f32 	%f9, %f35, %f153, %f34;
	abs.ftz.f32 	%f36, %f153;
	mov.f32 	%f37, 0f3F800000;
	sub.ftz.f32 	%f38, %f37, %f36;
	mul.ftz.f32 	%f39, %f38, 0f3F000000;
	sqrt.approx.ftz.f32 	%f40, %f39;
	setp.gt.ftz.f32	%p4, %f36, 0f3F11EB85;
	selp.f32	%f41, %f40, %f36, %p4;
	mul.ftz.f32 	%f42, %f41, %f41;
	mov.f32 	%f43, 0f3C94D2E9;
	mov.f32 	%f44, 0f3D53F941;
	fma.rn.ftz.f32 	%f45, %f44, %f42, %f43;
	mov.f32 	%f46, 0f3D3F841F;
	fma.rn.ftz.f32 	%f47, %f45, %f42, %f46;
	mov.f32 	%f48, 0f3D994929;
	fma.rn.ftz.f32 	%f49, %f47, %f42, %f48;
	mov.f32 	%f50, 0f3E2AAB94;
	fma.rn.ftz.f32 	%f51, %f49, %f42, %f50;
	mul.ftz.f32 	%f52, %f42, %f51;
	fma.rn.ftz.f32 	%f53, %f52, %f41, %f41;
	add.ftz.f32 	%f54, %f53, %f53;
	mov.f32 	%f55, 0f3FC90FDB;
	sub.ftz.f32 	%f56, %f55, %f53;
	selp.f32	%f57, %f54, %f56, %p4;
	setp.lt.ftz.f32	%p5, %f153, 0f00000000;
	mov.f32 	%f58, 0f40490FDB;
	sub.ftz.f32 	%f59, %f58, %f57;
	selp.f32	%f13, %f59, %f57, %p5;
	mul.ftz.f32 	%f60, %f152, %f152;
	fma.rn.ftz.f32 	%f61, %f151, %f151, %f60;
	sqrt.approx.ftz.f32 	%f62, %f61;
	div.approx.ftz.f32 	%f63, %f151, %f62;
	setp.ltu.ftz.f32	%p6, %f152, 0f00000000;
	selp.f32	%f64, 0fBF800000, 0f3F800000, %p6;
	mul.ftz.f32 	%f65, %f64, %f63;
	abs.ftz.f32 	%f66, %f65;
	sub.ftz.f32 	%f67, %f37, %f66;
	mul.ftz.f32 	%f68, %f67, 0f3F000000;
	sqrt.approx.ftz.f32 	%f69, %f68;
	setp.gt.ftz.f32	%p7, %f66, 0f3F11EB85;
	selp.f32	%f70, %f69, %f66, %p7;
	mul.ftz.f32 	%f71, %f70, %f70;
	fma.rn.ftz.f32 	%f72, %f44, %f71, %f43;
	fma.rn.ftz.f32 	%f73, %f72, %f71, %f46;
	fma.rn.ftz.f32 	%f74, %f73, %f71, %f48;
	fma.rn.ftz.f32 	%f75, %f74, %f71, %f50;
	mul.ftz.f32 	%f76, %f71, %f75;
	fma.rn.ftz.f32 	%f77, %f76, %f70, %f70;
	add.ftz.f32 	%f78, %f77, %f77;
	sub.ftz.f32 	%f79, %f55, %f77;
	selp.f32	%f80, %f78, %f79, %p7;
	setp.lt.ftz.f32	%p8, %f65, 0f00000000;
	sub.ftz.f32 	%f81, %f58, %f80;
	selp.f32	%f82, %f81, %f80, %p8;
	setp.lt.ftz.f32	%p9, %f152, 0f00000000;
	selp.f32	%f83, 0f40490FDB, 0f00000000, %p9;
	add.ftz.f32 	%f14, %f83, %f82;
	ld.global.u32 	%r21, [num_spectra_pairs_supported];
	mov.u32 	%r22, 8;
	min.u32 	%r2, %r22, %r21;
	setp.eq.s32	%p10, %r2, 0;
	@%p10 bra 	BB1_10;

	add.s32 	%r3, %r2, 1;
	add.u64 	%rd2, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd2;
	mov.u32 	%r23, 0;
	mov.u32 	%r46, %r23;

BB1_3:
	ld.global.u32 	%r25, [num_importance_directions];
	setp.eq.s32	%p11, %r25, 0;
	mov.f32 	%f149, 0f00000000;
	mov.u32 	%r50, %r23;
	mov.f32 	%f147, %f149;
	mov.f32 	%f148, %f149;
	@%p11 bra 	BB1_6;

	add.s32 	%r48, %r46, 1;
	mov.f32 	%f87, 0f00000000;
	mov.u32 	%r47, 0;
	mov.u32 	%r49, %r47;
	mov.f32 	%f147, %f87;
	mov.f32 	%f148, %f87;

BB1_5:
	st.local.v2.f32 	[%rd1], {%f87, %f87};
	st.local.v2.u32 	[%rd1+24], {%r48, %r46};
	ld.global.v2.u32 	{%r34, %r35}, [ray_payload+64];
	add.s32 	%r38, %r34, 1;
	st.local.v2.u32 	[%rd1+16], {%r38, %r35};
	cvt.u64.u32	%rd5, %r47;
	mov.u64 	%rd11, importance_directions_buffer;
	cvta.global.u64 	%rd4, %rd11;
	mov.u32 	%r28, 1;
	mov.u64 	%rd8, 0;
	// inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r28, %r22, %rd5, %rd8, %rd8, %rd8);
	// inline asm
	ld.v2.f32 	{%f96, %f97}, [%rd3];
	cos.approx.ftz.f32 	%f93, %f96;
	sin.approx.ftz.f32 	%f100, %f96;
	cos.approx.ftz.f32 	%f101, %f97;
	mul.ftz.f32 	%f91, %f100, %f101;
	sin.approx.ftz.f32 	%f102, %f97;
	mul.ftz.f32 	%f92, %f100, %f102;
	ld.global.f32 	%f95, [step_size];
	ld.global.u32 	%r30, [ox_entry_node];
	mov.u32 	%r31, 2;
	mov.u32 	%r32, 32;
	// inline asm
	call _rt_trace_64, (%r30, %f1, %f2, %f3, %f91, %f92, %f93, %r31, %f87, %f95, %rd2, %r32);
	// inline asm
	ld.global.u32 	%r33, [phase_function];
	// inline asm
	call (%rd10), _rt_callable_program_from_id_64, (%r33);
	// inline asm
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f1;
	st.param.f32	[param0+4], %f2;
	st.param.f32	[param0+8], %f3;
	.param .align 8 .b8 param1[8];
	st.param.f32	[param1+0], %f96;
	st.param.f32	[param1+4], %f97;
	.param .align 8 .b8 param2[8];
	st.param.f32	[param2+0], %f13;
	st.param.f32	[param2+4], %f14;
	.param .b32 param3;
	st.param.b32	[param3+0], %r46;
	.param .align 8 .b8 retval0[8];
	prototype_4 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .align 8 .b8 _[8], .param .align 8 .b8 _[8], .param .b32 _);
	call (retval0), 
	%rd10, 
	(
	param0, 
	param1, 
	param2, 
	param3
	)
	, prototype_4;
	ld.param.f32	%f103, [retval0+0];
	ld.param.f32	%f104, [retval0+4];
	
	//{
	}// Callseq End 4
	ld.local.v2.f32 	{%f105, %f106}, [%rd1];
	mul.ftz.f32 	%f108, %f105, %f103;
	mul.ftz.f32 	%f110, %f104, %f106;
	fma.rn.ftz.f32 	%f148, %f108, %f100, %f148;
	fma.rn.ftz.f32 	%f147, %f110, %f100, %f147;
	add.s32 	%r48, %r48, %r3;
	add.s32 	%r47, %r47, %r3;
	ld.global.u32 	%r50, [num_importance_directions];
	add.s32 	%r49, %r49, 1;
	setp.lt.u32	%p12, %r49, %r50;
	@%p12 bra 	BB1_5;

BB1_6:
	setp.eq.s32	%p13, %r50, 0;
	mov.f32 	%f150, %f149;
	@%p13 bra 	BB1_8;

	ld.global.u32 	%r39, [scattering_factor];
	// inline asm
	call (%rd12), _rt_callable_program_from_id_64, (%r39);
	// inline asm
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f7;
	st.param.f32	[param0+4], %f8;
	st.param.f32	[param0+8], %f9;
	.param .b32 param1;
	st.param.b32	[param1+0], %r46;
	.param .align 8 .b8 retval0[8];
	prototype_5 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd12, 
	(
	param0, 
	param1
	)
	, prototype_5;
	ld.param.f32	%f149, [retval0+0];
	ld.param.f32	%f150, [retval0+4];
	
	//{
	}// Callseq End 5

BB1_8:
	ld.global.u32 	%r40, [absorption_factor];
	// inline asm
	call (%rd13), _rt_callable_program_from_id_64, (%r40);
	// inline asm
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f7;
	st.param.f32	[param0+4], %f8;
	st.param.f32	[param0+8], %f9;
	.param .b32 param1;
	st.param.b32	[param1+0], %r46;
	.param .align 8 .b8 retval0[8];
	prototype_6 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd13, 
	(
	param0, 
	param1
	)
	, prototype_6;
	ld.param.f32	%f113, [retval0+0];
	ld.param.f32	%f114, [retval0+4];
	
	//{
	}// Callseq End 6
	add.ftz.f32 	%f115, %f149, %f113;
	add.ftz.f32 	%f116, %f150, %f114;
	ld.global.f32 	%f117, [intersection_distance];
	mul.ftz.f32 	%f118, %f117, %f115;
	mul.ftz.f32 	%f119, %f117, %f116;
	mul.ftz.f32 	%f120, %f118, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f121, %f120;
	mul.ftz.f32 	%f122, %f119, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f123, %f122;
	mul.wide.u32 	%rd15, %r46, 8;
	mov.u64 	%rd16, ray_payload;
	add.s64 	%rd17, %rd16, %rd15;
	ld.global.v2.f32 	{%f124, %f125}, [%rd17];
	ld.global.u32 	%r41, [scattering_factor];
	// inline asm
	call (%rd14), _rt_callable_program_from_id_64, (%r41);
	// inline asm
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f1;
	st.param.f32	[param0+4], %f2;
	st.param.f32	[param0+8], %f3;
	.param .b32 param1;
	st.param.b32	[param1+0], %r46;
	.param .align 8 .b8 retval0[8];
	prototype_7 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd14, 
	(
	param0, 
	param1
	)
	, prototype_7;
	ld.param.f32	%f128, [retval0+0];
	ld.param.f32	%f129, [retval0+4];
	
	//{
	}// Callseq End 7
	mul.ftz.f32 	%f130, %f148, %f128;
	mul.ftz.f32 	%f131, %f147, %f129;
	ld.global.f32 	%f132, [intersection_distance];
	mul.ftz.f32 	%f133, %f132, %f130;
	mul.ftz.f32 	%f134, %f132, %f131;
	fma.rn.ftz.f32 	%f135, %f123, %f125, %f134;
	fma.rn.ftz.f32 	%f136, %f121, %f124, %f133;
	st.global.v2.f32 	[%rd17], {%f136, %f135};
	add.s32 	%r46, %r46, 1;
	setp.lt.u32	%p14, %r46, %r2;
	@%p14 bra 	BB1_3;

	ld.global.u32 	%r51, [ray_payload+64];
	ld.global.f32 	%f153, [current_ray+20];
	ld.global.f32 	%f152, [current_ray+16];
	ld.global.f32 	%f151, [current_ray+12];

BB1_10:
	add.s32 	%r45, %r51, 1;
	mov.u64 	%rd19, ray_payload;
	st.global.u32 	[ray_payload+64], %r45;
	ld.global.f32 	%f144, [step_size];
	ld.global.u32 	%r42, [ox_entry_node];
	cvta.global.u64 	%rd18, %rd19;
	mov.u32 	%r43, 0;
	mov.f32 	%f143, 0f00000000;
	mov.u32 	%r44, 80;
	// inline asm
	call _rt_trace_64, (%r42, %f1, %f2, %f3, %f151, %f152, %f153, %r43, %f143, %f144, %rd18, %r44);
	// inline asm

BB1_11:
	ret;
}

	// .globl	_Z26__ox_intersect_scattered__v
.visible .entry _Z26__ox_intersect_scattered__v(

)
{
	.reg .f32 	%f<5>;
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<8>;


	ld.global.u32 	%rd3, [ray_payload_scattered+24];
	mov.u64 	%rd7, importance_directions_buffer;
	cvta.global.u64 	%rd2, %rd7;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 8;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r1, %r2, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.v2.f32 	{%f1, %f2}, [%rd1];
	st.global.v2.f32 	[ray_payload_scattered], {%f1, %f2};
	ret;
}

	// .globl	_Z21__ox_miss_scattered__v
.visible .entry _Z21__ox_miss_scattered__v(

)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<4>;


	ld.global.u32 	%r3, [ray_payload_scattered+16];
	add.s32 	%r1, %r3, 1;
	st.global.u32 	[ray_payload_scattered+16], %r1;
	ld.global.u32 	%r2, [max_recursion_depth];
	setp.gt.u32	%p1, %r1, %r2;
	@%p1 bra 	BB3_2;

	ld.global.f32 	%f9, [intersection_distance];
	ld.global.f32 	%f4, [current_ray+12];
	ld.global.f32 	%f5, [current_ray+16];
	ld.global.f32 	%f6, [current_ray+20];
	ld.global.f32 	%f10, [current_ray];
	fma.rn.ftz.f32 	%f1, %f9, %f4, %f10;
	ld.global.f32 	%f11, [current_ray+4];
	fma.rn.ftz.f32 	%f2, %f9, %f5, %f11;
	ld.global.f32 	%f12, [current_ray+8];
	fma.rn.ftz.f32 	%f3, %f9, %f6, %f12;
	mul.ftz.f32 	%f13, %f9, 0f3F000000;
	fma.rn.ftz.f32 	%f14, %f4, %f13, %f10;
	fma.rn.ftz.f32 	%f15, %f13, %f5, %f11;
	fma.rn.ftz.f32 	%f16, %f13, %f6, %f12;
	ld.global.f32 	%f17, [step_size];
	setp.lt.u32	%p2, %r1, %r2;
	selp.f32	%f8, %f17, 0f6C4ECB8F, %p2;
	ld.global.u32 	%r4, [ox_entry_node];
	mov.u64 	%rd3, ray_payload_scattered;
	cvta.global.u64 	%rd1, %rd3;
	mov.u32 	%r5, 2;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r6, 32;
	// inline asm
	call _rt_trace_64, (%r4, %f1, %f2, %f3, %f4, %f5, %f6, %r5, %f7, %f8, %rd1, %r6);
	// inline asm
	ld.global.u32 	%r8, [ray_payload_scattered+28];
	ld.global.u32 	%r7, [absorption_factor];
	// inline asm
	call (%rd2), _rt_callable_program_from_id_64, (%r7);
	// inline asm
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .align 4 .b8 param0[12];
	st.param.f32	[param0+0], %f14;
	st.param.f32	[param0+4], %f15;
	st.param.f32	[param0+8], %f16;
	.param .b32 param1;
	st.param.b32	[param1+0], %r8;
	.param .align 8 .b8 retval0[8];
	prototype_8 : .callprototype (.param .align 8 .b8 _[8]) _ (.param .align 4 .b8 _[12], .param .b32 _);
	call (retval0), 
	%rd2, 
	(
	param0, 
	param1
	)
	, prototype_8;
	ld.param.f32	%f18, [retval0+0];
	ld.param.f32	%f19, [retval0+4];
	
	//{
	}// Callseq End 8
	ld.global.f32 	%f20, [intersection_distance];
	mul.ftz.f32 	%f21, %f18, %f20;
	mul.ftz.f32 	%f22, %f19, %f20;
	mul.ftz.f32 	%f23, %f21, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f24, %f23;
	mul.ftz.f32 	%f25, %f22, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f26, %f25;
	ld.global.v2.f32 	{%f27, %f28}, [ray_payload_scattered];
	mul.ftz.f32 	%f30, %f26, %f28;
	mul.ftz.f32 	%f32, %f24, %f27;
	st.global.v2.f32 	[ray_payload_scattered], {%f32, %f30};

BB3_2:
	ret;
}


